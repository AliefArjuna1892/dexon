// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	goerrors "errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/dexon-foundation/dexon/core/vm/sqlvm/ast"
	"github.com/dexon-foundation/dexon/core/vm/sqlvm/errors"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "S",
			pos:  position{line: 10, col: 1, offset: 145},
			expr: &actionExpr{
				pos: position{line: 11, col: 5, offset: 151},
				run: (*parser).callonS1,
				expr: &seqExpr{
					pos: position{line: 11, col: 5, offset: 151},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 11, col: 5, offset: 151},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 7, offset: 153},
							label: "x",
							expr: &zeroOrOneExpr{
								pos: position{line: 11, col: 9, offset: 155},
								expr: &ruleRefExpr{
									pos:  position{line: 11, col: 9, offset: 155},
									name: "Stmt",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 15, offset: 161},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 17, offset: 163},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 11, col: 20, offset: 166},
								expr: &actionExpr{
									pos: position{line: 11, col: 22, offset: 168},
									run: (*parser).callonS10,
									expr: &seqExpr{
										pos: position{line: 11, col: 22, offset: 168},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 11, col: 22, offset: 168},
												val:        ";",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 26, offset: 172},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 11, col: 28, offset: 174},
												label: "s",
												expr: &zeroOrOneExpr{
													pos: position{line: 11, col: 30, offset: 176},
													expr: &ruleRefExpr{
														pos:  position{line: 11, col: 30, offset: 176},
														name: "Stmt",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 36, offset: 182},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 59, offset: 205},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Stmt",
			pos:  position{line: 15, col: 1, offset: 271},
			expr: &choiceExpr{
				pos: position{line: 16, col: 4, offset: 279},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 16, col: 4, offset: 279},
						name: "SelectStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 17, col: 4, offset: 293},
						name: "UpdateStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 18, col: 4, offset: 307},
						name: "DeleteStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 19, col: 4, offset: 321},
						name: "InsertStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 4, offset: 335},
						name: "CreateTableStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 21, col: 4, offset: 354},
						name: "CreateIndexStmt",
					},
				},
			},
		},
		{
			name: "SelectStmt",
			pos:  position{line: 23, col: 1, offset: 371},
			expr: &actionExpr{
				pos: position{line: 24, col: 4, offset: 385},
				run: (*parser).callonSelectStmt1,
				expr: &seqExpr{
					pos: position{line: 24, col: 4, offset: 385},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 4, offset: 385},
							name: "SelectToken",
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 2, offset: 398},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 25, col: 4, offset: 400},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 6, offset: 402},
								name: "SelectColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 25, col: 19, offset: 415},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 25, col: 22, offset: 418},
								expr: &actionExpr{
									pos: position{line: 25, col: 24, offset: 420},
									run: (*parser).callonSelectStmt9,
									expr: &seqExpr{
										pos: position{line: 25, col: 24, offset: 420},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 25, col: 24, offset: 420},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 25, col: 26, offset: 422},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 25, col: 41, offset: 437},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 25, col: 43, offset: 439},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 25, col: 45, offset: 441},
													name: "SelectColumn",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 26, col: 2, offset: 476},
							label: "table",
							expr: &zeroOrOneExpr{
								pos: position{line: 26, col: 8, offset: 482},
								expr: &actionExpr{
									pos: position{line: 26, col: 10, offset: 484},
									run: (*parser).callonSelectStmt18,
									expr: &seqExpr{
										pos: position{line: 26, col: 10, offset: 484},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 26, col: 10, offset: 484},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 26, col: 12, offset: 486},
												name: "FromToken",
											},
											&ruleRefExpr{
												pos:  position{line: 26, col: 22, offset: 496},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 26, col: 24, offset: 498},
												label: "i",
												expr: &ruleRefExpr{
													pos:  position{line: 26, col: 26, offset: 500},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 27, col: 2, offset: 533},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 27, col: 8, offset: 539},
								expr: &actionExpr{
									pos: position{line: 27, col: 10, offset: 541},
									run: (*parser).callonSelectStmt27,
									expr: &seqExpr{
										pos: position{line: 27, col: 10, offset: 541},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 27, col: 10, offset: 541},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 27, col: 12, offset: 543},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 27, col: 14, offset: 545},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 2, offset: 579},
							label: "group",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 8, offset: 585},
								expr: &actionExpr{
									pos: position{line: 28, col: 10, offset: 587},
									run: (*parser).callonSelectStmt34,
									expr: &seqExpr{
										pos: position{line: 28, col: 10, offset: 587},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 28, col: 10, offset: 587},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 28, col: 12, offset: 589},
												label: "g",
												expr: &ruleRefExpr{
													pos:  position{line: 28, col: 14, offset: 591},
													name: "GroupByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 29, col: 2, offset: 627},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 29, col: 8, offset: 633},
								expr: &actionExpr{
									pos: position{line: 29, col: 10, offset: 635},
									run: (*parser).callonSelectStmt41,
									expr: &seqExpr{
										pos: position{line: 29, col: 10, offset: 635},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 29, col: 10, offset: 635},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 29, col: 12, offset: 637},
												label: "or",
												expr: &ruleRefExpr{
													pos:  position{line: 29, col: 15, offset: 640},
													name: "OrderByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 2, offset: 677},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 30, col: 8, offset: 683},
								expr: &actionExpr{
									pos: position{line: 30, col: 10, offset: 685},
									run: (*parser).callonSelectStmt48,
									expr: &seqExpr{
										pos: position{line: 30, col: 10, offset: 685},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 10, offset: 685},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 30, col: 12, offset: 687},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 30, col: 14, offset: 689},
													name: "LimitClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 2, offset: 723},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 31, col: 9, offset: 730},
								expr: &actionExpr{
									pos: position{line: 31, col: 11, offset: 732},
									run: (*parser).callonSelectStmt55,
									expr: &seqExpr{
										pos: position{line: 31, col: 11, offset: 732},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 31, col: 11, offset: 732},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 31, col: 13, offset: 734},
												label: "of",
												expr: &ruleRefExpr{
													pos:  position{line: 31, col: 16, offset: 737},
													name: "OffsetClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectColumn",
			pos:  position{line: 60, col: 1, offset: 1527},
			expr: &choiceExpr{
				pos: position{line: 61, col: 4, offset: 1543},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 61, col: 4, offset: 1543},
						name: "AnyLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 4, offset: 1557},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "UpdateStmt",
			pos:  position{line: 64, col: 1, offset: 1563},
			expr: &actionExpr{
				pos: position{line: 65, col: 4, offset: 1577},
				run: (*parser).callonUpdateStmt1,
				expr: &seqExpr{
					pos: position{line: 65, col: 4, offset: 1577},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 65, col: 4, offset: 1577},
							name: "UpdateToken",
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 2, offset: 1590},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 66, col: 4, offset: 1592},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 10, offset: 1598},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 2, offset: 1610},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 4, offset: 1612},
							name: "SetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 2, offset: 1622},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 4, offset: 1624},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 6, offset: 1626},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 68, col: 17, offset: 1637},
							label: "as",
							expr: &zeroOrMoreExpr{
								pos: position{line: 68, col: 20, offset: 1640},
								expr: &actionExpr{
									pos: position{line: 68, col: 22, offset: 1642},
									run: (*parser).callonUpdateStmt14,
									expr: &seqExpr{
										pos: position{line: 68, col: 22, offset: 1642},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 68, col: 22, offset: 1642},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 68, col: 24, offset: 1644},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 68, col: 39, offset: 1659},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 68, col: 41, offset: 1661},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 68, col: 43, offset: 1663},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 2, offset: 1696},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 69, col: 8, offset: 1702},
								expr: &actionExpr{
									pos: position{line: 69, col: 10, offset: 1704},
									run: (*parser).callonUpdateStmt23,
									expr: &seqExpr{
										pos: position{line: 69, col: 10, offset: 1704},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 69, col: 10, offset: 1704},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 69, col: 12, offset: 1706},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 69, col: 14, offset: 1708},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DeleteStmt",
			pos:  position{line: 84, col: 1, offset: 2119},
			expr: &actionExpr{
				pos: position{line: 85, col: 4, offset: 2133},
				run: (*parser).callonDeleteStmt1,
				expr: &seqExpr{
					pos: position{line: 85, col: 4, offset: 2133},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 85, col: 4, offset: 2133},
							name: "DeleteToken",
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 2, offset: 2146},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 4, offset: 2148},
							name: "FromToken",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 2, offset: 2159},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 4, offset: 2161},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 10, offset: 2167},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 2, offset: 2179},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 88, col: 8, offset: 2185},
								expr: &actionExpr{
									pos: position{line: 88, col: 10, offset: 2187},
									run: (*parser).callonDeleteStmt11,
									expr: &seqExpr{
										pos: position{line: 88, col: 10, offset: 2187},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 88, col: 10, offset: 2187},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 88, col: 12, offset: 2189},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 88, col: 14, offset: 2191},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertStmt",
			pos:  position{line: 98, col: 1, offset: 2386},
			expr: &actionExpr{
				pos: position{line: 99, col: 4, offset: 2400},
				run: (*parser).callonInsertStmt1,
				expr: &seqExpr{
					pos: position{line: 99, col: 4, offset: 2400},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 4, offset: 2400},
							name: "InsertToken",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 2, offset: 2413},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 4, offset: 2415},
							name: "IntoToken",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 2, offset: 2426},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 4, offset: 2428},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 10, offset: 2434},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 2, offset: 2446},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 102, col: 4, offset: 2448},
							label: "insert",
							expr: &choiceExpr{
								pos: position{line: 102, col: 13, offset: 2457},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 102, col: 13, offset: 2457},
										name: "InsertWithColumnClause",
									},
									&ruleRefExpr{
										pos:  position{line: 102, col: 38, offset: 2482},
										name: "InsertWithDefaultClause",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertValue",
			pos:  position{line: 117, col: 1, offset: 2816},
			expr: &actionExpr{
				pos: position{line: 118, col: 4, offset: 2831},
				run: (*parser).callonInsertValue1,
				expr: &seqExpr{
					pos: position{line: 118, col: 4, offset: 2831},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 118, col: 4, offset: 2831},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 8, offset: 2835},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 10, offset: 2837},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 12, offset: 2839},
								name: "MultiExprWithDefault",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 33, offset: 2860},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 118, col: 35, offset: 2862},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CreateTableStmt",
			pos:  position{line: 121, col: 1, offset: 2885},
			expr: &actionExpr{
				pos: position{line: 122, col: 4, offset: 2904},
				run: (*parser).callonCreateTableStmt1,
				expr: &seqExpr{
					pos: position{line: 122, col: 4, offset: 2904},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 122, col: 4, offset: 2904},
							name: "CreateToken",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 2, offset: 2917},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 4, offset: 2919},
							name: "TableToken",
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 2, offset: 2931},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 4, offset: 2933},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 10, offset: 2939},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 2, offset: 2951},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 125, col: 4, offset: 2953},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 2, offset: 2958},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 4, offset: 2960},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 11, offset: 2967},
								expr: &actionExpr{
									pos: position{line: 127, col: 3, offset: 2971},
									run: (*parser).callonCreateTableStmt14,
									expr: &seqExpr{
										pos: position{line: 127, col: 3, offset: 2971},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 127, col: 3, offset: 2971},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 127, col: 5, offset: 2973},
													name: "ColumnSchema",
												},
											},
											&labeledExpr{
												pos:   position{line: 128, col: 3, offset: 2988},
												label: "ss",
												expr: &zeroOrMoreExpr{
													pos: position{line: 128, col: 6, offset: 2991},
													expr: &actionExpr{
														pos: position{line: 128, col: 8, offset: 2993},
														run: (*parser).callonCreateTableStmt20,
														expr: &seqExpr{
															pos: position{line: 128, col: 8, offset: 2993},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 128, col: 8, offset: 2993},
																	name: "_",
																},
																&ruleRefExpr{
																	pos:  position{line: 128, col: 10, offset: 2995},
																	name: "SeparatorToken",
																},
																&ruleRefExpr{
																	pos:  position{line: 128, col: 25, offset: 3010},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 128, col: 27, offset: 3012},
																	label: "t",
																	expr: &ruleRefExpr{
																		pos:  position{line: 128, col: 29, offset: 3014},
																		name: "ColumnSchema",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 131, col: 2, offset: 3099},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3101},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ColumnSchema",
			pos:  position{line: 143, col: 1, offset: 3402},
			expr: &actionExpr{
				pos: position{line: 144, col: 4, offset: 3418},
				run: (*parser).callonColumnSchema1,
				expr: &seqExpr{
					pos: position{line: 144, col: 4, offset: 3418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 144, col: 4, offset: 3418},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 6, offset: 3420},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 145, col: 2, offset: 3432},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 145, col: 4, offset: 3434},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 145, col: 6, offset: 3436},
								name: "DataType",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 2, offset: 3446},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 5, offset: 3449},
								expr: &actionExpr{
									pos: position{line: 146, col: 7, offset: 3451},
									run: (*parser).callonColumnSchema10,
									expr: &seqExpr{
										pos: position{line: 146, col: 7, offset: 3451},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 146, col: 7, offset: 3451},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 146, col: 9, offset: 3453},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 146, col: 11, offset: 3455},
													name: "ColumnConstraint",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnConstraint",
			pos:  position{line: 174, col: 1, offset: 4230},
			expr: &choiceExpr{
				pos: position{line: 175, col: 4, offset: 4250},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 175, col: 4, offset: 4250},
						name: "PrimaryKeyClause",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 4, offset: 4270},
						name: "NotNullClause",
					},
					&ruleRefExpr{
						pos:  position{line: 177, col: 4, offset: 4287},
						name: "UniqueClause",
					},
					&ruleRefExpr{
						pos:  position{line: 178, col: 4, offset: 4303},
						name: "DefaultClause",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 4, offset: 4320},
						name: "ForeignClause",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 4, offset: 4337},
						name: "AutoincrementClause",
					},
				},
			},
		},
		{
			name: "CreateIndexStmt",
			pos:  position{line: 182, col: 1, offset: 4358},
			expr: &actionExpr{
				pos: position{line: 183, col: 4, offset: 4377},
				run: (*parser).callonCreateIndexStmt1,
				expr: &seqExpr{
					pos: position{line: 183, col: 4, offset: 4377},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 183, col: 4, offset: 4377},
							name: "CreateToken",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 2, offset: 4390},
							label: "unique",
							expr: &zeroOrOneExpr{
								pos: position{line: 184, col: 9, offset: 4397},
								expr: &actionExpr{
									pos: position{line: 184, col: 11, offset: 4399},
									run: (*parser).callonCreateIndexStmt6,
									expr: &seqExpr{
										pos: position{line: 184, col: 11, offset: 4399},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 184, col: 11, offset: 4399},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 184, col: 13, offset: 4401},
												label: "u",
												expr: &ruleRefExpr{
													pos:  position{line: 184, col: 15, offset: 4403},
													name: "UniqueClause",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 2, offset: 4438},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 4, offset: 4440},
							name: "IndexToken",
						},
						&ruleRefExpr{
							pos:  position{line: 186, col: 2, offset: 4452},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 186, col: 4, offset: 4454},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 10, offset: 4460},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 187, col: 2, offset: 4472},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 187, col: 4, offset: 4474},
							name: "OnToken",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 2, offset: 4483},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 4, offset: 4485},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 10, offset: 4491},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 2, offset: 4503},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 189, col: 4, offset: 4505},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 8, offset: 4509},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 189, col: 10, offset: 4511},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 12, offset: 4513},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 23, offset: 4524},
							label: "is",
							expr: &zeroOrMoreExpr{
								pos: position{line: 189, col: 26, offset: 4527},
								expr: &actionExpr{
									pos: position{line: 189, col: 28, offset: 4529},
									run: (*parser).callonCreateIndexStmt28,
									expr: &seqExpr{
										pos: position{line: 189, col: 28, offset: 4529},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 189, col: 28, offset: 4529},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 189, col: 30, offset: 4531},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 189, col: 45, offset: 4546},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 189, col: 47, offset: 4548},
												label: "x",
												expr: &ruleRefExpr{
													pos:  position{line: 189, col: 49, offset: 4550},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 81, offset: 4582},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 189, col: 83, offset: 4584},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 206, col: 1, offset: 5028},
			expr: &actionExpr{
				pos: position{line: 207, col: 4, offset: 5043},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 207, col: 4, offset: 5043},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 207, col: 4, offset: 5043},
							name: "WhereToken",
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 15, offset: 5054},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 17, offset: 5056},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 19, offset: 5058},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderByClause",
			pos:  position{line: 214, col: 1, offset: 5153},
			expr: &actionExpr{
				pos: position{line: 215, col: 4, offset: 5170},
				run: (*parser).callonOrderByClause1,
				expr: &seqExpr{
					pos: position{line: 215, col: 4, offset: 5170},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 5170},
							name: "OrderToken",
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 2, offset: 5182},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 4, offset: 5184},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 217, col: 2, offset: 5193},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 4, offset: 5195},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 6, offset: 5197},
								name: "OrderColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 2, offset: 5210},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 218, col: 5, offset: 5213},
								expr: &actionExpr{
									pos: position{line: 218, col: 7, offset: 5215},
									run: (*parser).callonOrderByClause11,
									expr: &seqExpr{
										pos: position{line: 218, col: 7, offset: 5215},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 218, col: 7, offset: 5215},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 218, col: 9, offset: 5217},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 218, col: 24, offset: 5232},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 218, col: 26, offset: 5234},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 218, col: 28, offset: 5236},
													name: "OrderColumn",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderColumn",
			pos:  position{line: 223, col: 1, offset: 5315},
			expr: &actionExpr{
				pos: position{line: 224, col: 4, offset: 5330},
				run: (*parser).callonOrderColumn1,
				expr: &seqExpr{
					pos: position{line: 224, col: 4, offset: 5330},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 224, col: 4, offset: 5330},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 6, offset: 5332},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 2, offset: 5338},
							label: "s",
							expr: &zeroOrOneExpr{
								pos: position{line: 225, col: 4, offset: 5340},
								expr: &actionExpr{
									pos: position{line: 225, col: 6, offset: 5342},
									run: (*parser).callonOrderColumn7,
									expr: &seqExpr{
										pos: position{line: 225, col: 6, offset: 5342},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 225, col: 6, offset: 5342},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 225, col: 8, offset: 5344},
												label: "t",
												expr: &choiceExpr{
													pos: position{line: 225, col: 12, offset: 5348},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 225, col: 12, offset: 5348},
															name: "AscToken",
														},
														&ruleRefExpr{
															pos:  position{line: 225, col: 23, offset: 5359},
															name: "DescToken",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 2, offset: 5393},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 4, offset: 5395},
								expr: &actionExpr{
									pos: position{line: 226, col: 6, offset: 5397},
									run: (*parser).callonOrderColumn16,
									expr: &seqExpr{
										pos: position{line: 226, col: 6, offset: 5397},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 226, col: 6, offset: 5397},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 8, offset: 5399},
												name: "NullsToken",
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 19, offset: 5410},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 21, offset: 5412},
												label: "l",
												expr: &choiceExpr{
													pos: position{line: 226, col: 25, offset: 5416},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 226, col: 25, offset: 5416},
															name: "LastToken",
														},
														&ruleRefExpr{
															pos:  position{line: 226, col: 37, offset: 5428},
															name: "FirstToken",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupByClause",
			pos:  position{line: 235, col: 1, offset: 5662},
			expr: &actionExpr{
				pos: position{line: 236, col: 4, offset: 5679},
				run: (*parser).callonGroupByClause1,
				expr: &seqExpr{
					pos: position{line: 236, col: 4, offset: 5679},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 236, col: 4, offset: 5679},
							name: "GroupToken",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 2, offset: 5691},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 4, offset: 5693},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 238, col: 2, offset: 5702},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 238, col: 4, offset: 5704},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 6, offset: 5706},
								name: "GroupColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 2, offset: 5719},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 239, col: 5, offset: 5722},
								expr: &actionExpr{
									pos: position{line: 239, col: 7, offset: 5724},
									run: (*parser).callonGroupByClause11,
									expr: &seqExpr{
										pos: position{line: 239, col: 7, offset: 5724},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 239, col: 7, offset: 5724},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 9, offset: 5726},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 24, offset: 5741},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 26, offset: 5743},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 28, offset: 5745},
													name: "GroupColumn",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupColumn",
			pos:  position{line: 244, col: 1, offset: 5824},
			expr: &actionExpr{
				pos: position{line: 245, col: 4, offset: 5839},
				run: (*parser).callonGroupColumn1,
				expr: &labeledExpr{
					pos:   position{line: 245, col: 4, offset: 5839},
					label: "i",
					expr: &ruleRefExpr{
						pos:  position{line: 245, col: 6, offset: 5841},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "OffsetClause",
			pos:  position{line: 252, col: 1, offset: 5931},
			expr: &actionExpr{
				pos: position{line: 253, col: 4, offset: 5947},
				run: (*parser).callonOffsetClause1,
				expr: &seqExpr{
					pos: position{line: 253, col: 4, offset: 5947},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 253, col: 4, offset: 5947},
							name: "OffsetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 16, offset: 5959},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 18, offset: 5961},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 20, offset: 5963},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitClause",
			pos:  position{line: 260, col: 1, offset: 6067},
			expr: &actionExpr{
				pos: position{line: 261, col: 4, offset: 6082},
				run: (*parser).callonLimitClause1,
				expr: &seqExpr{
					pos: position{line: 261, col: 4, offset: 6082},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 261, col: 4, offset: 6082},
							name: "LimitToken",
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 15, offset: 6093},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 17, offset: 6095},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 19, offset: 6097},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "InsertWithColumnClause",
			pos:  position{line: 268, col: 1, offset: 6200},
			expr: &actionExpr{
				pos: position{line: 269, col: 4, offset: 6226},
				run: (*parser).callonInsertWithColumnClause1,
				expr: &seqExpr{
					pos: position{line: 269, col: 4, offset: 6226},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 269, col: 4, offset: 6226},
							label: "cs",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 7, offset: 6229},
								expr: &actionExpr{
									pos: position{line: 269, col: 9, offset: 6231},
									run: (*parser).callonInsertWithColumnClause5,
									expr: &seqExpr{
										pos: position{line: 269, col: 9, offset: 6231},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 269, col: 9, offset: 6231},
												val:        "(",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 270, col: 4, offset: 6238},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 270, col: 6, offset: 6240},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 270, col: 8, offset: 6242},
													name: "Identifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 271, col: 4, offset: 6256},
												label: "fs",
												expr: &zeroOrMoreExpr{
													pos: position{line: 271, col: 7, offset: 6259},
													expr: &actionExpr{
														pos: position{line: 271, col: 9, offset: 6261},
														run: (*parser).callonInsertWithColumnClause13,
														expr: &seqExpr{
															pos: position{line: 271, col: 9, offset: 6261},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 271, col: 9, offset: 6261},
																	name: "_",
																},
																&ruleRefExpr{
																	pos:  position{line: 271, col: 11, offset: 6263},
																	name: "SeparatorToken",
																},
																&ruleRefExpr{
																	pos:  position{line: 271, col: 26, offset: 6278},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 271, col: 28, offset: 6280},
																	label: "x",
																	expr: &ruleRefExpr{
																		pos:  position{line: 271, col: 30, offset: 6282},
																		name: "Identifier",
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 272, col: 4, offset: 6317},
												name: "_",
											},
											&litMatcher{
												pos:        position{line: 272, col: 6, offset: 6319},
												val:        ")",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 273, col: 4, offset: 6326},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 3, offset: 6379},
							name: "ValuesToken",
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 2, offset: 6392},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 4, offset: 6394},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 6, offset: 6396},
								name: "InsertValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 2, offset: 6409},
							label: "vs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 277, col: 5, offset: 6412},
								expr: &actionExpr{
									pos: position{line: 277, col: 7, offset: 6414},
									run: (*parser).callonInsertWithColumnClause29,
									expr: &seqExpr{
										pos: position{line: 277, col: 7, offset: 6414},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 277, col: 7, offset: 6414},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 277, col: 9, offset: 6416},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 277, col: 24, offset: 6431},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 277, col: 26, offset: 6433},
												label: "y",
												expr: &ruleRefExpr{
													pos:  position{line: 277, col: 28, offset: 6435},
													name: "InsertValue",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertWithDefaultClause",
			pos:  position{line: 294, col: 1, offset: 6934},
			expr: &actionExpr{
				pos: position{line: 295, col: 4, offset: 6961},
				run: (*parser).callonInsertWithDefaultClause1,
				expr: &seqExpr{
					pos: position{line: 295, col: 4, offset: 6961},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 295, col: 4, offset: 6961},
							name: "DefaultToken",
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 17, offset: 6974},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 19, offset: 6976},
							name: "ValuesToken",
						},
					},
				},
			},
		},
		{
			name: "PrimaryKeyClause",
			pos:  position{line: 301, col: 1, offset: 7055},
			expr: &actionExpr{
				pos: position{line: 302, col: 4, offset: 7075},
				run: (*parser).callonPrimaryKeyClause1,
				expr: &seqExpr{
					pos: position{line: 302, col: 4, offset: 7075},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 302, col: 4, offset: 7075},
							name: "PrimaryToken",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 17, offset: 7088},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 19, offset: 7090},
							name: "KeyToken",
						},
					},
				},
			},
		},
		{
			name: "NotNullClause",
			pos:  position{line: 308, col: 1, offset: 7156},
			expr: &actionExpr{
				pos: position{line: 309, col: 4, offset: 7173},
				run: (*parser).callonNotNullClause1,
				expr: &seqExpr{
					pos: position{line: 309, col: 4, offset: 7173},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 309, col: 4, offset: 7173},
							name: "NotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 13, offset: 7182},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 15, offset: 7184},
							name: "NullToken",
						},
					},
				},
			},
		},
		{
			name: "UniqueClause",
			pos:  position{line: 315, col: 1, offset: 7251},
			expr: &actionExpr{
				pos: position{line: 316, col: 4, offset: 7267},
				run: (*parser).callonUniqueClause1,
				expr: &ruleRefExpr{
					pos:  position{line: 316, col: 4, offset: 7267},
					name: "UniqueToken",
				},
			},
		},
		{
			name: "DefaultClause",
			pos:  position{line: 322, col: 1, offset: 7335},
			expr: &actionExpr{
				pos: position{line: 323, col: 4, offset: 7352},
				run: (*parser).callonDefaultClause1,
				expr: &seqExpr{
					pos: position{line: 323, col: 4, offset: 7352},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 323, col: 4, offset: 7352},
							name: "DefaultToken",
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 17, offset: 7365},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 19, offset: 7367},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 21, offset: 7369},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "ForeignClause",
			pos:  position{line: 330, col: 1, offset: 7462},
			expr: &actionExpr{
				pos: position{line: 331, col: 4, offset: 7479},
				run: (*parser).callonForeignClause1,
				expr: &seqExpr{
					pos: position{line: 331, col: 4, offset: 7479},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 331, col: 4, offset: 7479},
							name: "ReferencesToken",
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 20, offset: 7495},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 22, offset: 7497},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 24, offset: 7499},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 35, offset: 7510},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 331, col: 37, offset: 7512},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 41, offset: 7516},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 43, offset: 7518},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 45, offset: 7520},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 56, offset: 7531},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 331, col: 58, offset: 7533},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AutoincrementClause",
			pos:  position{line: 339, col: 1, offset: 7671},
			expr: &actionExpr{
				pos: position{line: 340, col: 4, offset: 7694},
				run: (*parser).callonAutoincrementClause1,
				expr: &ruleRefExpr{
					pos:  position{line: 340, col: 4, offset: 7694},
					name: "AutoincrementToken",
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 347, col: 1, offset: 7794},
			expr: &ruleRefExpr{
				pos:  position{line: 348, col: 4, offset: 7802},
				name: "LogicExpr",
			},
		},
		{
			name: "ExprWithDefault",
			pos:  position{line: 350, col: 1, offset: 7813},
			expr: &choiceExpr{
				pos: position{line: 351, col: 4, offset: 7832},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 4, offset: 7832},
						run: (*parser).callonExprWithDefault2,
						expr: &seqExpr{
							pos: position{line: 351, col: 4, offset: 7832},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 351, col: 4, offset: 7832},
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 6, offset: 7834},
										name: "DefaultLiteral",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 22, offset: 7850},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 24, offset: 7852},
										name: "DefaultLiteral",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 352, col: 4, offset: 7888},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "LogicExpr",
			pos:  position{line: 354, col: 1, offset: 7894},
			expr: &ruleRefExpr{
				pos:  position{line: 355, col: 4, offset: 7907},
				name: "LogicExpr4",
			},
		},
		{
			name: "LogicExpr4",
			pos:  position{line: 357, col: 1, offset: 7919},
			expr: &actionExpr{
				pos: position{line: 358, col: 4, offset: 7933},
				run: (*parser).callonLogicExpr41,
				expr: &seqExpr{
					pos: position{line: 358, col: 4, offset: 7933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 358, col: 4, offset: 7933},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 6, offset: 7935},
								name: "LogicExpr3",
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 3, offset: 7948},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 359, col: 6, offset: 7951},
								expr: &actionExpr{
									pos: position{line: 359, col: 8, offset: 7953},
									run: (*parser).callonLogicExpr47,
									expr: &seqExpr{
										pos: position{line: 359, col: 8, offset: 7953},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 359, col: 8, offset: 7953},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 359, col: 10, offset: 7955},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 359, col: 13, offset: 7958},
													name: "OrOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 359, col: 24, offset: 7969},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 359, col: 26, offset: 7971},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 359, col: 28, offset: 7973},
													name: "LogicExpr3",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr3",
			pos:  position{line: 363, col: 1, offset: 8136},
			expr: &actionExpr{
				pos: position{line: 364, col: 4, offset: 8150},
				run: (*parser).callonLogicExpr31,
				expr: &seqExpr{
					pos: position{line: 364, col: 4, offset: 8150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 364, col: 4, offset: 8150},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 6, offset: 8152},
								name: "LogicExpr2",
							},
						},
						&labeledExpr{
							pos:   position{line: 365, col: 3, offset: 8165},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 365, col: 6, offset: 8168},
								expr: &actionExpr{
									pos: position{line: 365, col: 8, offset: 8170},
									run: (*parser).callonLogicExpr37,
									expr: &seqExpr{
										pos: position{line: 365, col: 8, offset: 8170},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 365, col: 8, offset: 8170},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 365, col: 10, offset: 8172},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 365, col: 13, offset: 8175},
													name: "AndOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 365, col: 25, offset: 8187},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 365, col: 27, offset: 8189},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 365, col: 29, offset: 8191},
													name: "LogicExpr2",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr2",
			pos:  position{line: 369, col: 1, offset: 8354},
			expr: &choiceExpr{
				pos: position{line: 370, col: 4, offset: 8368},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 370, col: 4, offset: 8368},
						run: (*parser).callonLogicExpr22,
						expr: &seqExpr{
							pos: position{line: 370, col: 4, offset: 8368},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 370, col: 4, offset: 8368},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 7, offset: 8371},
										name: "NotOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 19, offset: 8383},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 370, col: 21, offset: 8385},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 23, offset: 8387},
										name: "LogicExpr2",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 4, offset: 8472},
						name: "LogicExpr1",
					},
				},
			},
		},
		{
			name: "LogicExpr1",
			pos:  position{line: 374, col: 1, offset: 8484},
			expr: &actionExpr{
				pos: position{line: 375, col: 4, offset: 8498},
				run: (*parser).callonLogicExpr11,
				expr: &seqExpr{
					pos: position{line: 375, col: 4, offset: 8498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 4, offset: 8498},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 6, offset: 8500},
								name: "ArithmeticExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 375, col: 21, offset: 8515},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 375, col: 24, offset: 8518},
								expr: &actionExpr{
									pos: position{line: 375, col: 26, offset: 8520},
									run: (*parser).callonLogicExpr17,
									expr: &seqExpr{
										pos: position{line: 375, col: 26, offset: 8520},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 375, col: 26, offset: 8520},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 375, col: 28, offset: 8522},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 375, col: 30, offset: 8524},
													name: "LogicExpr1Op",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Op",
			pos:  position{line: 378, col: 1, offset: 8633},
			expr: &choiceExpr{
				pos: position{line: 379, col: 4, offset: 8649},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 379, col: 4, offset: 8649},
						name: "LogicExpr1In",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 4, offset: 8665},
						name: "LogicExpr1Is",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 4, offset: 8681},
						name: "LogicExpr1Like",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 4, offset: 8699},
						name: "LogicExpr1Cmp",
					},
				},
			},
		},
		{
			name: "LogicExpr1In",
			pos:  position{line: 384, col: 1, offset: 8714},
			expr: &actionExpr{
				pos: position{line: 385, col: 4, offset: 8730},
				run: (*parser).callonLogicExpr1In1,
				expr: &seqExpr{
					pos: position{line: 385, col: 4, offset: 8730},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 4, offset: 8730},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 385, col: 6, offset: 8732},
								expr: &actionExpr{
									pos: position{line: 385, col: 8, offset: 8734},
									run: (*parser).callonLogicExpr1In5,
									expr: &seqExpr{
										pos: position{line: 385, col: 8, offset: 8734},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 385, col: 8, offset: 8734},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 385, col: 10, offset: 8736},
													name: "NotOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 385, col: 22, offset: 8748},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 45, offset: 8771},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 53, offset: 8779},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 385, col: 55, offset: 8781},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 59, offset: 8785},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 61, offset: 8787},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 63, offset: 8789},
								name: "MultiExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 73, offset: 8799},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 385, col: 75, offset: 8801},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Is",
			pos:  position{line: 395, col: 1, offset: 8965},
			expr: &actionExpr{
				pos: position{line: 396, col: 4, offset: 8981},
				run: (*parser).callonLogicExpr1Is1,
				expr: &seqExpr{
					pos: position{line: 396, col: 4, offset: 8981},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 396, col: 4, offset: 8981},
							name: "IsToken",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 12, offset: 8989},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 396, col: 14, offset: 8991},
								expr: &actionExpr{
									pos: position{line: 396, col: 16, offset: 8993},
									run: (*parser).callonLogicExpr1Is6,
									expr: &seqExpr{
										pos: position{line: 396, col: 16, offset: 8993},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 396, col: 16, offset: 8993},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 396, col: 18, offset: 8995},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 396, col: 20, offset: 8997},
													name: "NotOperator",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 53, offset: 9030},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 55, offset: 9032},
							name: "NullToken",
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Like",
			pos:  position{line: 407, col: 1, offset: 9225},
			expr: &actionExpr{
				pos: position{line: 408, col: 4, offset: 9243},
				run: (*parser).callonLogicExpr1Like1,
				expr: &seqExpr{
					pos: position{line: 408, col: 4, offset: 9243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 4, offset: 9243},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 408, col: 6, offset: 9245},
								expr: &actionExpr{
									pos: position{line: 408, col: 8, offset: 9247},
									run: (*parser).callonLogicExpr1Like5,
									expr: &seqExpr{
										pos: position{line: 408, col: 8, offset: 9247},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 408, col: 8, offset: 9247},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 408, col: 10, offset: 9249},
													name: "NotOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 408, col: 22, offset: 9261},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 45, offset: 9284},
							name: "LikeToken",
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 55, offset: 9294},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 57, offset: 9296},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 59, offset: 9298},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Cmp",
			pos:  position{line: 418, col: 1, offset: 9470},
			expr: &actionExpr{
				pos: position{line: 419, col: 4, offset: 9487},
				run: (*parser).callonLogicExpr1Cmp1,
				expr: &seqExpr{
					pos: position{line: 419, col: 4, offset: 9487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 419, col: 4, offset: 9487},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 7, offset: 9490},
								name: "CmpOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 419, col: 19, offset: 9502},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 21, offset: 9504},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 23, offset: 9506},
								name: "ArithmeticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr",
			pos:  position{line: 422, col: 1, offset: 9594},
			expr: &ruleRefExpr{
				pos:  position{line: 423, col: 4, offset: 9612},
				name: "ArithmeticExpr3",
			},
		},
		{
			name: "ArithmeticExpr3",
			pos:  position{line: 425, col: 1, offset: 9629},
			expr: &actionExpr{
				pos: position{line: 426, col: 4, offset: 9648},
				run: (*parser).callonArithmeticExpr31,
				expr: &seqExpr{
					pos: position{line: 426, col: 4, offset: 9648},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 426, col: 4, offset: 9648},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 6, offset: 9650},
								name: "ArithmeticExpr2",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 3, offset: 9668},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 427, col: 6, offset: 9671},
								expr: &actionExpr{
									pos: position{line: 427, col: 8, offset: 9673},
									run: (*parser).callonArithmeticExpr37,
									expr: &seqExpr{
										pos: position{line: 427, col: 8, offset: 9673},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 427, col: 8, offset: 9673},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 427, col: 10, offset: 9675},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 427, col: 13, offset: 9678},
													name: "ConcatOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 427, col: 28, offset: 9693},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 427, col: 30, offset: 9695},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 427, col: 32, offset: 9697},
													name: "ArithmeticExpr2",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr2",
			pos:  position{line: 431, col: 1, offset: 9865},
			expr: &actionExpr{
				pos: position{line: 432, col: 4, offset: 9884},
				run: (*parser).callonArithmeticExpr21,
				expr: &seqExpr{
					pos: position{line: 432, col: 4, offset: 9884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 432, col: 4, offset: 9884},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 6, offset: 9886},
								name: "ArithmeticExpr1",
							},
						},
						&labeledExpr{
							pos:   position{line: 433, col: 3, offset: 9904},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 433, col: 6, offset: 9907},
								expr: &actionExpr{
									pos: position{line: 433, col: 8, offset: 9909},
									run: (*parser).callonArithmeticExpr27,
									expr: &seqExpr{
										pos: position{line: 433, col: 8, offset: 9909},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 433, col: 8, offset: 9909},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 433, col: 10, offset: 9911},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 433, col: 13, offset: 9914},
													name: "AddSubOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 433, col: 28, offset: 9929},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 433, col: 30, offset: 9931},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 433, col: 32, offset: 9933},
													name: "ArithmeticExpr1",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr1",
			pos:  position{line: 437, col: 1, offset: 10101},
			expr: &actionExpr{
				pos: position{line: 438, col: 4, offset: 10120},
				run: (*parser).callonArithmeticExpr11,
				expr: &seqExpr{
					pos: position{line: 438, col: 4, offset: 10120},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 438, col: 4, offset: 10120},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 6, offset: 10122},
								name: "Operand",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 3, offset: 10132},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 439, col: 6, offset: 10135},
								expr: &actionExpr{
									pos: position{line: 439, col: 8, offset: 10137},
									run: (*parser).callonArithmeticExpr17,
									expr: &seqExpr{
										pos: position{line: 439, col: 8, offset: 10137},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 439, col: 8, offset: 10137},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 439, col: 10, offset: 10139},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 439, col: 13, offset: 10142},
													name: "MulDivModOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 439, col: 31, offset: 10160},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 439, col: 33, offset: 10162},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 439, col: 35, offset: 10164},
													name: "Operand",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiExpr",
			pos:  position{line: 443, col: 1, offset: 10324},
			expr: &actionExpr{
				pos: position{line: 444, col: 4, offset: 10337},
				run: (*parser).callonMultiExpr1,
				expr: &seqExpr{
					pos: position{line: 444, col: 4, offset: 10337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 444, col: 4, offset: 10337},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 6, offset: 10339},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 11, offset: 10344},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 444, col: 14, offset: 10347},
								expr: &actionExpr{
									pos: position{line: 444, col: 16, offset: 10349},
									run: (*parser).callonMultiExpr7,
									expr: &seqExpr{
										pos: position{line: 444, col: 16, offset: 10349},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 444, col: 16, offset: 10349},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 444, col: 18, offset: 10351},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 444, col: 33, offset: 10366},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 444, col: 35, offset: 10368},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 444, col: 37, offset: 10370},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiExprWithDefault",
			pos:  position{line: 447, col: 1, offset: 10458},
			expr: &actionExpr{
				pos: position{line: 448, col: 4, offset: 10482},
				run: (*parser).callonMultiExprWithDefault1,
				expr: &seqExpr{
					pos: position{line: 448, col: 4, offset: 10482},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 448, col: 4, offset: 10482},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 6, offset: 10484},
								name: "ExprWithDefault",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 22, offset: 10500},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 448, col: 25, offset: 10503},
								expr: &actionExpr{
									pos: position{line: 448, col: 27, offset: 10505},
									run: (*parser).callonMultiExprWithDefault7,
									expr: &seqExpr{
										pos: position{line: 448, col: 27, offset: 10505},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 448, col: 27, offset: 10505},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 448, col: 29, offset: 10507},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 448, col: 44, offset: 10522},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 448, col: 46, offset: 10524},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 448, col: 48, offset: 10526},
													name: "ExprWithDefault",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operand",
			pos:  position{line: 451, col: 1, offset: 10625},
			expr: &choiceExpr{
				pos: position{line: 452, col: 4, offset: 10636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 452, col: 4, offset: 10636},
						run: (*parser).callonOperand2,
						expr: &seqExpr{
							pos: position{line: 452, col: 4, offset: 10636},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 452, col: 4, offset: 10636},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 452, col: 7, offset: 10639},
										name: "UnaryOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 452, col: 21, offset: 10653},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 452, col: 23, offset: 10655},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 452, col: 25, offset: 10657},
										name: "Operand",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 454, col: 4, offset: 10740},
						run: (*parser).callonOperand9,
						expr: &seqExpr{
							pos: position{line: 454, col: 4, offset: 10740},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 454, col: 4, offset: 10740},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 454, col: 8, offset: 10744},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 454, col: 10, offset: 10746},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 454, col: 12, offset: 10748},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 454, col: 17, offset: 10753},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 454, col: 19, offset: 10755},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 455, col: 4, offset: 10780},
						run: (*parser).callonOperand17,
						expr: &seqExpr{
							pos: position{line: 455, col: 4, offset: 10780},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 455, col: 4, offset: 10780},
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 6, offset: 10782},
										name: "CastToken",
									},
								},
								&labeledExpr{
									pos:   position{line: 455, col: 17, offset: 10793},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 19, offset: 10795},
										name: "TypeCast",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 456, col: 4, offset: 10825},
						name: "FunctionCall",
					},
					&ruleRefExpr{
						pos:  position{line: 457, col: 4, offset: 10841},
						name: "Value",
					},
					&ruleRefExpr{
						pos:  position{line: 458, col: 4, offset: 10850},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "TypeCast",
			pos:  position{line: 460, col: 1, offset: 10862},
			expr: &actionExpr{
				pos: position{line: 461, col: 4, offset: 10874},
				run: (*parser).callonTypeCast1,
				expr: &seqExpr{
					pos: position{line: 461, col: 4, offset: 10874},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 461, col: 4, offset: 10874},
							name: "CastToken",
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 14, offset: 10884},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 461, col: 16, offset: 10886},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 20, offset: 10890},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 22, offset: 10892},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 24, offset: 10894},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 29, offset: 10899},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 31, offset: 10901},
							name: "AsToken",
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 39, offset: 10909},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 41, offset: 10911},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 43, offset: 10913},
								name: "DataType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 52, offset: 10922},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 461, col: 54, offset: 10924},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 469, col: 1, offset: 11056},
			expr: &actionExpr{
				pos: position{line: 470, col: 4, offset: 11072},
				run: (*parser).callonFunctionCall1,
				expr: &seqExpr{
					pos: position{line: 470, col: 4, offset: 11072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 470, col: 4, offset: 11072},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 6, offset: 11074},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 17, offset: 11085},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 470, col: 19, offset: 11087},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 23, offset: 11091},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 25, offset: 11093},
							label: "r",
							expr: &zeroOrOneExpr{
								pos: position{line: 470, col: 27, offset: 11095},
								expr: &ruleRefExpr{
									pos:  position{line: 470, col: 27, offset: 11095},
									name: "FunctionArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 41, offset: 11109},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 470, col: 43, offset: 11111},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 480, col: 1, offset: 11263},
			expr: &choiceExpr{
				pos: position{line: 481, col: 4, offset: 11279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 481, col: 4, offset: 11279},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 481, col: 4, offset: 11279},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 11281},
								name: "AnyLiteral",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 4, offset: 11349},
						name: "MultiExpr",
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 484, col: 1, offset: 11360},
			expr: &actionExpr{
				pos: position{line: 485, col: 4, offset: 11374},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 485, col: 4, offset: 11374},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 485, col: 4, offset: 11374},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 11376},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 485, col: 17, offset: 11387},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 485, col: 19, offset: 11389},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 485, col: 23, offset: 11393},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 485, col: 25, offset: 11395},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 27, offset: 11397},
								name: "ExprWithDefault",
							},
						},
					},
				},
			},
		},
		{
			name: "UnaryOperator",
			pos:  position{line: 494, col: 1, offset: 11556},
			expr: &ruleRefExpr{
				pos:  position{line: 495, col: 4, offset: 11573},
				name: "SignOperator",
			},
		},
		{
			name: "SignOperator",
			pos:  position{line: 497, col: 1, offset: 11587},
			expr: &actionExpr{
				pos: position{line: 498, col: 4, offset: 11603},
				run: (*parser).callonSignOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 498, col: 4, offset: 11603},
					name: "Sign",
				},
			},
		},
		{
			name: "NotOperator",
			pos:  position{line: 512, col: 1, offset: 11831},
			expr: &actionExpr{
				pos: position{line: 513, col: 4, offset: 11846},
				run: (*parser).callonNotOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 513, col: 4, offset: 11846},
					name: "NotToken",
				},
			},
		},
		{
			name: "AndOperator",
			pos:  position{line: 519, col: 1, offset: 11910},
			expr: &actionExpr{
				pos: position{line: 520, col: 4, offset: 11925},
				run: (*parser).callonAndOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 520, col: 4, offset: 11925},
					name: "AndToken",
				},
			},
		},
		{
			name: "OrOperator",
			pos:  position{line: 526, col: 1, offset: 11989},
			expr: &actionExpr{
				pos: position{line: 527, col: 4, offset: 12003},
				run: (*parser).callonOrOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 527, col: 4, offset: 12003},
					name: "OrToken",
				},
			},
		},
		{
			name: "CmpOperator",
			pos:  position{line: 533, col: 1, offset: 12065},
			expr: &actionExpr{
				pos: position{line: 534, col: 4, offset: 12080},
				run: (*parser).callonCmpOperator1,
				expr: &choiceExpr{
					pos: position{line: 534, col: 6, offset: 12082},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 534, col: 6, offset: 12082},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 534, col: 13, offset: 12089},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 534, col: 20, offset: 12096},
							val:        "<>",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 534, col: 27, offset: 12103},
							val:        "!=",
							ignoreCase: false,
						},
						&charClassMatcher{
							pos:        position{line: 534, col: 34, offset: 12110},
							val:        "[<>=]",
							chars:      []rune{'<', '>', '='},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ConcatOperator",
			pos:  position{line: 558, col: 1, offset: 12612},
			expr: &actionExpr{
				pos: position{line: 559, col: 4, offset: 12630},
				run: (*parser).callonConcatOperator1,
				expr: &litMatcher{
					pos:        position{line: 559, col: 4, offset: 12630},
					val:        "||",
					ignoreCase: false,
				},
			},
		},
		{
			name: "AddSubOperator",
			pos:  position{line: 565, col: 1, offset: 12693},
			expr: &actionExpr{
				pos: position{line: 566, col: 4, offset: 12711},
				run: (*parser).callonAddSubOperator1,
				expr: &charClassMatcher{
					pos:        position{line: 566, col: 4, offset: 12711},
					val:        "[+-]",
					chars:      []rune{'+', '-'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "MulDivModOperator",
			pos:  position{line: 580, col: 1, offset: 12968},
			expr: &actionExpr{
				pos: position{line: 581, col: 4, offset: 12989},
				run: (*parser).callonMulDivModOperator1,
				expr: &charClassMatcher{
					pos:        position{line: 581, col: 4, offset: 12989},
					val:        "[*/%]",
					chars:      []rune{'*', '/', '%'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "DataType",
			pos:  position{line: 598, col: 1, offset: 13312},
			expr: &choiceExpr{
				pos: position{line: 599, col: 4, offset: 13324},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 599, col: 4, offset: 13324},
						name: "UIntType",
					},
					&ruleRefExpr{
						pos:  position{line: 600, col: 4, offset: 13336},
						name: "IntType",
					},
					&ruleRefExpr{
						pos:  position{line: 601, col: 4, offset: 13347},
						name: "UFixedType",
					},
					&ruleRefExpr{
						pos:  position{line: 602, col: 4, offset: 13361},
						name: "FixedType",
					},
					&ruleRefExpr{
						pos:  position{line: 603, col: 4, offset: 13374},
						name: "FixedBytesType",
					},
					&ruleRefExpr{
						pos:  position{line: 604, col: 4, offset: 13392},
						name: "DynamicBytesType",
					},
					&ruleRefExpr{
						pos:  position{line: 605, col: 4, offset: 13412},
						name: "BoolType",
					},
					&ruleRefExpr{
						pos:  position{line: 606, col: 4, offset: 13424},
						name: "AddressType",
					},
				},
			},
		},
		{
			name: "UIntType",
			pos:  position{line: 608, col: 1, offset: 13437},
			expr: &actionExpr{
				pos: position{line: 609, col: 4, offset: 13449},
				run: (*parser).callonUIntType1,
				expr: &seqExpr{
					pos: position{line: 609, col: 4, offset: 13449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 609, col: 4, offset: 13449},
							val:        "uint",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 609, col: 12, offset: 13457},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 14, offset: 13459},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 609, col: 36, offset: 13481},
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 37, offset: 13482},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IntType",
			pos:  position{line: 629, col: 1, offset: 13929},
			expr: &actionExpr{
				pos: position{line: 630, col: 4, offset: 13940},
				run: (*parser).callonIntType1,
				expr: &seqExpr{
					pos: position{line: 630, col: 4, offset: 13940},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 4, offset: 13940},
							val:        "int",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 11, offset: 13947},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 13, offset: 13949},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 630, col: 35, offset: 13971},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 36, offset: 13972},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "UFixedType",
			pos:  position{line: 650, col: 1, offset: 14419},
			expr: &actionExpr{
				pos: position{line: 651, col: 4, offset: 14433},
				run: (*parser).callonUFixedType1,
				expr: &seqExpr{
					pos: position{line: 651, col: 4, offset: 14433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 651, col: 4, offset: 14433},
							val:        "ufixed",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 651, col: 14, offset: 14443},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 16, offset: 14445},
								name: "NonZeroLeadingInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 651, col: 38, offset: 14467},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 651, col: 43, offset: 14472},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 45, offset: 14474},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 67, offset: 14496},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 68, offset: 14497},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FixedType",
			pos:  position{line: 684, col: 1, offset: 15339},
			expr: &actionExpr{
				pos: position{line: 685, col: 4, offset: 15352},
				run: (*parser).callonFixedType1,
				expr: &seqExpr{
					pos: position{line: 685, col: 4, offset: 15352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 685, col: 4, offset: 15352},
							val:        "fixed",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 685, col: 13, offset: 15361},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 15, offset: 15363},
								name: "NonZeroLeadingInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 685, col: 37, offset: 15385},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 685, col: 42, offset: 15390},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 44, offset: 15392},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 685, col: 66, offset: 15414},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 67, offset: 15415},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FixedBytesType",
			pos:  position{line: 718, col: 1, offset: 16256},
			expr: &choiceExpr{
				pos: position{line: 719, col: 4, offset: 16274},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 719, col: 4, offset: 16274},
						run: (*parser).callonFixedBytesType2,
						expr: &seqExpr{
							pos: position{line: 719, col: 4, offset: 16274},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 719, col: 4, offset: 16274},
									val:        "bytes",
									ignoreCase: true,
								},
								&labeledExpr{
									pos:   position{line: 719, col: 13, offset: 16283},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 719, col: 15, offset: 16285},
										name: "NonZeroLeadingInteger",
									},
								},
								&notExpr{
									pos: position{line: 719, col: 37, offset: 16307},
									expr: &ruleRefExpr{
										pos:  position{line: 719, col: 38, offset: 16308},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 737, col: 4, offset: 16748},
						run: (*parser).callonFixedBytesType9,
						expr: &seqExpr{
							pos: position{line: 737, col: 4, offset: 16748},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 737, col: 4, offset: 16748},
									val:        "byte",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 737, col: 12, offset: 16756},
									expr: &ruleRefExpr{
										pos:  position{line: 737, col: 13, offset: 16757},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DynamicBytesType",
			pos:  position{line: 744, col: 1, offset: 16851},
			expr: &actionExpr{
				pos: position{line: 745, col: 4, offset: 16871},
				run: (*parser).callonDynamicBytesType1,
				expr: &choiceExpr{
					pos: position{line: 745, col: 6, offset: 16873},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 745, col: 6, offset: 16873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 745, col: 6, offset: 16873},
									val:        "bytes",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 745, col: 15, offset: 16882},
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 16, offset: 16883},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 746, col: 5, offset: 16908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 746, col: 5, offset: 16908},
									val:        "string",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 746, col: 15, offset: 16918},
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 16, offset: 16919},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 747, col: 5, offset: 16944},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 747, col: 5, offset: 16944},
									val:        "text",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 747, col: 13, offset: 16952},
									expr: &ruleRefExpr{
										pos:  position{line: 747, col: 14, offset: 16953},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AddressType",
			pos:  position{line: 754, col: 1, offset: 17037},
			expr: &actionExpr{
				pos: position{line: 755, col: 4, offset: 17052},
				run: (*parser).callonAddressType1,
				expr: &seqExpr{
					pos: position{line: 755, col: 4, offset: 17052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 755, col: 4, offset: 17052},
							val:        "address",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 755, col: 15, offset: 17063},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 16, offset: 17064},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolType",
			pos:  position{line: 761, col: 1, offset: 17140},
			expr: &actionExpr{
				pos: position{line: 762, col: 4, offset: 17152},
				run: (*parser).callonBoolType1,
				expr: &choiceExpr{
					pos: position{line: 762, col: 6, offset: 17154},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 762, col: 6, offset: 17154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 6, offset: 17154},
									val:        "bool",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 762, col: 14, offset: 17162},
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 15, offset: 17163},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 763, col: 5, offset: 17188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 763, col: 5, offset: 17188},
									val:        "boolean",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 763, col: 16, offset: 17199},
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 17, offset: 17200},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 771, col: 1, offset: 17289},
			expr: &choiceExpr{
				pos: position{line: 772, col: 4, offset: 17298},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 772, col: 4, offset: 17298},
						name: "NumberLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 773, col: 4, offset: 17315},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 4, offset: 17332},
						name: "BoolLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 775, col: 4, offset: 17347},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "AnyLiteral",
			pos:  position{line: 777, col: 1, offset: 17360},
			expr: &actionExpr{
				pos: position{line: 778, col: 4, offset: 17374},
				run: (*parser).callonAnyLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 778, col: 4, offset: 17374},
					name: "AnyToken",
				},
			},
		},
		{
			name: "DefaultLiteral",
			pos:  position{line: 784, col: 1, offset: 17435},
			expr: &actionExpr{
				pos: position{line: 785, col: 4, offset: 17453},
				run: (*parser).callonDefaultLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 785, col: 4, offset: 17453},
					name: "DefaultToken",
				},
			},
		},
		{
			name: "BoolLiteral",
			pos:  position{line: 791, col: 1, offset: 17522},
			expr: &actionExpr{
				pos: position{line: 792, col: 4, offset: 17537},
				run: (*parser).callonBoolLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 792, col: 4, offset: 17537},
					label: "b",
					expr: &choiceExpr{
						pos: position{line: 792, col: 8, offset: 17541},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 792, col: 8, offset: 17541},
								name: "TrueToken",
							},
							&ruleRefExpr{
								pos:  position{line: 792, col: 20, offset: 17553},
								name: "FalseToken",
							},
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 799, col: 1, offset: 17658},
			expr: &actionExpr{
				pos: position{line: 800, col: 4, offset: 17673},
				run: (*parser).callonNullLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 800, col: 4, offset: 17673},
					name: "NullToken",
				},
			},
		},
		{
			name: "NumberLiteral",
			pos:  position{line: 806, col: 1, offset: 17736},
			expr: &choiceExpr{
				pos: position{line: 807, col: 4, offset: 17753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 807, col: 4, offset: 17753},
						run: (*parser).callonNumberLiteral2,
						expr: &seqExpr{
							pos: position{line: 807, col: 4, offset: 17753},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 807, col: 4, offset: 17753},
									expr: &seqExpr{
										pos: position{line: 807, col: 6, offset: 17755},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 807, col: 6, offset: 17755},
												val:        "0",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 807, col: 10, offset: 17759},
												val:        "x",
												ignoreCase: true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 807, col: 16, offset: 17765},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 18, offset: 17767},
										name: "Hex",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 808, col: 4, offset: 17792},
						name: "Decimal",
					},
				},
			},
		},
		{
			name: "Sign",
			pos:  position{line: 810, col: 1, offset: 17801},
			expr: &charClassMatcher{
				pos:        position{line: 811, col: 4, offset: 17809},
				val:        "[-+]",
				chars:      []rune{'-', '+'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Integer",
			pos:  position{line: 813, col: 1, offset: 17815},
			expr: &actionExpr{
				pos: position{line: 814, col: 4, offset: 17826},
				run: (*parser).callonInteger1,
				expr: &oneOrMoreExpr{
					pos: position{line: 814, col: 4, offset: 17826},
					expr: &charClassMatcher{
						pos:        position{line: 814, col: 4, offset: 17826},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "NonZeroLeadingInteger",
			pos:  position{line: 834, col: 1, offset: 18261},
			expr: &actionExpr{
				pos: position{line: 835, col: 4, offset: 18286},
				run: (*parser).callonNonZeroLeadingInteger1,
				expr: &choiceExpr{
					pos: position{line: 835, col: 6, offset: 18288},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 835, col: 6, offset: 18288},
							val:        "0",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 835, col: 12, offset: 18294},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 835, col: 12, offset: 18294},
									val:        "[1-9]",
									ranges:     []rune{'1', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 835, col: 17, offset: 18299},
									expr: &charClassMatcher{
										pos:        position{line: 835, col: 17, offset: 18299},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Fixnum",
			pos:  position{line: 838, col: 1, offset: 18332},
			expr: &choiceExpr{
				pos: position{line: 839, col: 4, offset: 18342},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 839, col: 4, offset: 18342},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 839, col: 4, offset: 18342},
								name: "Integer",
							},
							&litMatcher{
								pos:        position{line: 839, col: 12, offset: 18350},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 839, col: 16, offset: 18354},
								name: "Integer",
							},
						},
					},
					&seqExpr{
						pos: position{line: 840, col: 4, offset: 18365},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 840, col: 4, offset: 18365},
								name: "Integer",
							},
							&zeroOrOneExpr{
								pos: position{line: 840, col: 12, offset: 18373},
								expr: &litMatcher{
									pos:        position{line: 840, col: 12, offset: 18373},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 841, col: 4, offset: 18381},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 841, col: 4, offset: 18381},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 841, col: 8, offset: 18385},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 843, col: 1, offset: 18394},
			expr: &actionExpr{
				pos: position{line: 844, col: 4, offset: 18405},
				run: (*parser).callonDecimal1,
				expr: &seqExpr{
					pos: position{line: 844, col: 4, offset: 18405},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 844, col: 4, offset: 18405},
							name: "Fixnum",
						},
						&zeroOrOneExpr{
							pos: position{line: 844, col: 11, offset: 18412},
							expr: &seqExpr{
								pos: position{line: 844, col: 13, offset: 18414},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 844, col: 13, offset: 18414},
										val:        "e",
										ignoreCase: true,
									},
									&zeroOrOneExpr{
										pos: position{line: 844, col: 18, offset: 18419},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 18, offset: 18419},
											name: "Sign",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 844, col: 24, offset: 18425},
										name: "Integer",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 863, col: 1, offset: 18840},
			expr: &actionExpr{
				pos: position{line: 864, col: 4, offset: 18847},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 864, col: 4, offset: 18847},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 864, col: 4, offset: 18847},
							val:        "0",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 864, col: 8, offset: 18851},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 864, col: 13, offset: 18856},
							label: "s",
							expr: &oneOrMoreExpr{
								pos: position{line: 864, col: 15, offset: 18858},
								expr: &charClassMatcher{
									pos:        position{line: 864, col: 17, offset: 18860},
									val:        "[0-9A-Fa-f]",
									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&notExpr{
							pos: position{line: 864, col: 32, offset: 18875},
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 33, offset: 18876},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 867, col: 1, offset: 18954},
			expr: &choiceExpr{
				pos: position{line: 868, col: 4, offset: 18971},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 868, col: 4, offset: 18971},
						name: "HexString",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 4, offset: 18984},
						name: "NormalString",
					},
				},
			},
		},
		{
			name: "HexString",
			pos:  position{line: 871, col: 1, offset: 18998},
			expr: &actionExpr{
				pos: position{line: 872, col: 4, offset: 19011},
				run: (*parser).callonHexString1,
				expr: &seqExpr{
					pos: position{line: 872, col: 4, offset: 19011},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 872, col: 6, offset: 19013},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 872, col: 6, offset: 19013},
									val:        "hex",
									ignoreCase: true,
								},
								&litMatcher{
									pos:        position{line: 872, col: 15, offset: 19022},
									val:        "x",
									ignoreCase: true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 872, col: 22, offset: 19029},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 872, col: 26, offset: 19033},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 872, col: 28, offset: 19035},
								expr: &actionExpr{
									pos: position{line: 872, col: 29, offset: 19036},
									run: (*parser).callonHexString9,
									expr: &seqExpr{
										pos: position{line: 872, col: 29, offset: 19036},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 872, col: 29, offset: 19036},
												val:        "[0-9a-fA-F]",
												ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 872, col: 40, offset: 19047},
												val:        "[0-9a-fA-F]",
												ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 872, col: 78, offset: 19085},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NormalString",
			pos:  position{line: 879, col: 1, offset: 19191},
			expr: &actionExpr{
				pos: position{line: 880, col: 4, offset: 19207},
				run: (*parser).callonNormalString1,
				expr: &seqExpr{
					pos: position{line: 880, col: 4, offset: 19207},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 880, col: 4, offset: 19207},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 880, col: 8, offset: 19211},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 880, col: 10, offset: 19213},
								expr: &actionExpr{
									pos: position{line: 880, col: 12, offset: 19215},
									run: (*parser).callonNormalString6,
									expr: &choiceExpr{
										pos: position{line: 880, col: 14, offset: 19217},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 880, col: 14, offset: 19217},
												val:        "[^'\\r\\n\\\\]",
												chars:      []rune{'\'', '\r', '\n', '\\'},
												ignoreCase: false,
												inverted:   true,
											},
											&seqExpr{
												pos: position{line: 880, col: 27, offset: 19230},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 880, col: 27, offset: 19230},
														val:        "\\",
														ignoreCase: false,
													},
													&anyMatcher{
														line: 880, col: 32, offset: 19235,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 880, col: 62, offset: 19265},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectToken",
			pos:  position{line: 903, col: 1, offset: 19768},
			expr: &seqExpr{
				pos: position{line: 904, col: 4, offset: 19783},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 904, col: 4, offset: 19783},
						val:        "select",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 904, col: 14, offset: 19793},
						expr: &ruleRefExpr{
							pos:  position{line: 904, col: 15, offset: 19794},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "FromToken",
			pos:  position{line: 906, col: 1, offset: 19816},
			expr: &seqExpr{
				pos: position{line: 907, col: 4, offset: 19829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 907, col: 4, offset: 19829},
						val:        "from",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 907, col: 12, offset: 19837},
						expr: &ruleRefExpr{
							pos:  position{line: 907, col: 13, offset: 19838},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "WhereToken",
			pos:  position{line: 909, col: 1, offset: 19860},
			expr: &seqExpr{
				pos: position{line: 910, col: 4, offset: 19874},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 910, col: 4, offset: 19874},
						val:        "where",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 910, col: 13, offset: 19883},
						expr: &ruleRefExpr{
							pos:  position{line: 910, col: 14, offset: 19884},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OrderToken",
			pos:  position{line: 912, col: 1, offset: 19906},
			expr: &seqExpr{
				pos: position{line: 913, col: 4, offset: 19920},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 913, col: 4, offset: 19920},
						val:        "order",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 913, col: 13, offset: 19929},
						expr: &ruleRefExpr{
							pos:  position{line: 913, col: 14, offset: 19930},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 915, col: 1, offset: 19952},
			expr: &seqExpr{
				pos: position{line: 916, col: 4, offset: 19963},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 916, col: 4, offset: 19963},
						val:        "by",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 916, col: 10, offset: 19969},
						expr: &ruleRefExpr{
							pos:  position{line: 916, col: 11, offset: 19970},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "GroupToken",
			pos:  position{line: 918, col: 1, offset: 19992},
			expr: &seqExpr{
				pos: position{line: 919, col: 4, offset: 20006},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 919, col: 4, offset: 20006},
						val:        "group",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 919, col: 13, offset: 20015},
						expr: &ruleRefExpr{
							pos:  position{line: 919, col: 14, offset: 20016},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "LimitToken",
			pos:  position{line: 921, col: 1, offset: 20038},
			expr: &seqExpr{
				pos: position{line: 922, col: 4, offset: 20052},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 922, col: 4, offset: 20052},
						val:        "limit",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 922, col: 13, offset: 20061},
						expr: &ruleRefExpr{
							pos:  position{line: 922, col: 14, offset: 20062},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OffsetToken",
			pos:  position{line: 924, col: 1, offset: 20084},
			expr: &seqExpr{
				pos: position{line: 925, col: 4, offset: 20099},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 925, col: 4, offset: 20099},
						val:        "offset",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 925, col: 14, offset: 20109},
						expr: &ruleRefExpr{
							pos:  position{line: 925, col: 15, offset: 20110},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "UpdateToken",
			pos:  position{line: 927, col: 1, offset: 20132},
			expr: &seqExpr{
				pos: position{line: 928, col: 4, offset: 20147},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 928, col: 4, offset: 20147},
						val:        "update",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 928, col: 14, offset: 20157},
						expr: &ruleRefExpr{
							pos:  position{line: 928, col: 15, offset: 20158},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "SetToken",
			pos:  position{line: 930, col: 1, offset: 20180},
			expr: &seqExpr{
				pos: position{line: 931, col: 4, offset: 20192},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 931, col: 4, offset: 20192},
						val:        "set",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 931, col: 11, offset: 20199},
						expr: &ruleRefExpr{
							pos:  position{line: 931, col: 12, offset: 20200},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "DeleteToken",
			pos:  position{line: 933, col: 1, offset: 20222},
			expr: &seqExpr{
				pos: position{line: 934, col: 4, offset: 20237},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 934, col: 4, offset: 20237},
						val:        "delete",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 934, col: 14, offset: 20247},
						expr: &ruleRefExpr{
							pos:  position{line: 934, col: 15, offset: 20248},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "InsertToken",
			pos:  position{line: 936, col: 1, offset: 20270},
			expr: &seqExpr{
				pos: position{line: 937, col: 4, offset: 20285},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 937, col: 4, offset: 20285},
						val:        "insert",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 937, col: 14, offset: 20295},
						expr: &ruleRefExpr{
							pos:  position{line: 937, col: 15, offset: 20296},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "IntoToken",
			pos:  position{line: 939, col: 1, offset: 20318},
			expr: &seqExpr{
				pos: position{line: 940, col: 4, offset: 20331},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 940, col: 4, offset: 20331},
						val:        "into",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 940, col: 12, offset: 20339},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 13, offset: 20340},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "ValuesToken",
			pos:  position{line: 942, col: 1, offset: 20362},
			expr: &seqExpr{
				pos: position{line: 943, col: 4, offset: 20377},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 943, col: 4, offset: 20377},
						val:        "values",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 943, col: 14, offset: 20387},
						expr: &ruleRefExpr{
							pos:  position{line: 943, col: 15, offset: 20388},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "CreateToken",
			pos:  position{line: 945, col: 1, offset: 20410},
			expr: &seqExpr{
				pos: position{line: 946, col: 4, offset: 20425},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 946, col: 4, offset: 20425},
						val:        "create",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 946, col: 14, offset: 20435},
						expr: &ruleRefExpr{
							pos:  position{line: 946, col: 15, offset: 20436},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "TableToken",
			pos:  position{line: 948, col: 1, offset: 20458},
			expr: &seqExpr{
				pos: position{line: 949, col: 4, offset: 20472},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 949, col: 4, offset: 20472},
						val:        "table",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 949, col: 13, offset: 20481},
						expr: &ruleRefExpr{
							pos:  position{line: 949, col: 14, offset: 20482},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "IndexToken",
			pos:  position{line: 951, col: 1, offset: 20504},
			expr: &seqExpr{
				pos: position{line: 952, col: 4, offset: 20518},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 952, col: 4, offset: 20518},
						val:        "index",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 952, col: 13, offset: 20527},
						expr: &ruleRefExpr{
							pos:  position{line: 952, col: 14, offset: 20528},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "UniqueToken",
			pos:  position{line: 954, col: 1, offset: 20550},
			expr: &seqExpr{
				pos: position{line: 955, col: 4, offset: 20565},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 955, col: 4, offset: 20565},
						val:        "unique",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 955, col: 14, offset: 20575},
						expr: &ruleRefExpr{
							pos:  position{line: 955, col: 15, offset: 20576},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 957, col: 1, offset: 20598},
			expr: &seqExpr{
				pos: position{line: 958, col: 4, offset: 20614},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 958, col: 4, offset: 20614},
						val:        "default",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 958, col: 15, offset: 20625},
						expr: &ruleRefExpr{
							pos:  position{line: 958, col: 16, offset: 20626},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "PrimaryToken",
			pos:  position{line: 960, col: 1, offset: 20648},
			expr: &seqExpr{
				pos: position{line: 961, col: 4, offset: 20664},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 961, col: 4, offset: 20664},
						val:        "primary",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 961, col: 15, offset: 20675},
						expr: &ruleRefExpr{
							pos:  position{line: 961, col: 16, offset: 20676},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "KeyToken",
			pos:  position{line: 963, col: 1, offset: 20698},
			expr: &seqExpr{
				pos: position{line: 964, col: 4, offset: 20710},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 964, col: 4, offset: 20710},
						val:        "key",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 964, col: 11, offset: 20717},
						expr: &ruleRefExpr{
							pos:  position{line: 964, col: 12, offset: 20718},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "ReferencesToken",
			pos:  position{line: 966, col: 1, offset: 20740},
			expr: &seqExpr{
				pos: position{line: 967, col: 4, offset: 20759},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 967, col: 4, offset: 20759},
						val:        "references",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 967, col: 18, offset: 20773},
						expr: &ruleRefExpr{
							pos:  position{line: 967, col: 19, offset: 20774},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "AutoincrementToken",
			pos:  position{line: 969, col: 1, offset: 20796},
			expr: &seqExpr{
				pos: position{line: 970, col: 4, offset: 20818},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 970, col: 4, offset: 20818},
						val:        "autoincrement",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 970, col: 21, offset: 20835},
						expr: &ruleRefExpr{
							pos:  position{line: 970, col: 22, offset: 20836},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OnToken",
			pos:  position{line: 972, col: 1, offset: 20858},
			expr: &seqExpr{
				pos: position{line: 973, col: 4, offset: 20869},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 973, col: 4, offset: 20869},
						val:        "on",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 973, col: 10, offset: 20875},
						expr: &ruleRefExpr{
							pos:  position{line: 973, col: 11, offset: 20876},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "TrueToken",
			pos:  position{line: 975, col: 1, offset: 20898},
			expr: &actionExpr{
				pos: position{line: 976, col: 4, offset: 20911},
				run: (*parser).callonTrueToken1,
				expr: &seqExpr{
					pos: position{line: 976, col: 4, offset: 20911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 976, col: 4, offset: 20911},
							val:        "true",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 976, col: 12, offset: 20919},
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 13, offset: 20920},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FalseToken",
			pos:  position{line: 979, col: 1, offset: 20974},
			expr: &actionExpr{
				pos: position{line: 980, col: 4, offset: 20988},
				run: (*parser).callonFalseToken1,
				expr: &seqExpr{
					pos: position{line: 980, col: 4, offset: 20988},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 980, col: 4, offset: 20988},
							val:        "false",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 980, col: 13, offset: 20997},
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 14, offset: 20998},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NullToken",
			pos:  position{line: 983, col: 1, offset: 21052},
			expr: &seqExpr{
				pos: position{line: 984, col: 4, offset: 21065},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 984, col: 4, offset: 21065},
						val:        "null",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 984, col: 12, offset: 21073},
						expr: &ruleRefExpr{
							pos:  position{line: 984, col: 13, offset: 21074},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "IsToken",
			pos:  position{line: 986, col: 1, offset: 21096},
			expr: &seqExpr{
				pos: position{line: 987, col: 4, offset: 21107},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 987, col: 4, offset: 21107},
						val:        "is",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 987, col: 10, offset: 21113},
						expr: &ruleRefExpr{
							pos:  position{line: 987, col: 11, offset: 21114},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "NullsToken",
			pos:  position{line: 989, col: 1, offset: 21136},
			expr: &seqExpr{
				pos: position{line: 990, col: 4, offset: 21150},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 990, col: 4, offset: 21150},
						val:        "nulls",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 990, col: 13, offset: 21159},
						expr: &ruleRefExpr{
							pos:  position{line: 990, col: 14, offset: 21160},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "LastToken",
			pos:  position{line: 992, col: 1, offset: 21182},
			expr: &actionExpr{
				pos: position{line: 993, col: 4, offset: 21195},
				run: (*parser).callonLastToken1,
				expr: &seqExpr{
					pos: position{line: 993, col: 4, offset: 21195},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 993, col: 4, offset: 21195},
							val:        "last",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 993, col: 12, offset: 21203},
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 13, offset: 21204},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FirstToken",
			pos:  position{line: 996, col: 1, offset: 21258},
			expr: &actionExpr{
				pos: position{line: 997, col: 4, offset: 21272},
				run: (*parser).callonFirstToken1,
				expr: &seqExpr{
					pos: position{line: 997, col: 4, offset: 21272},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 997, col: 4, offset: 21272},
							val:        "first",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 997, col: 13, offset: 21281},
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 14, offset: 21282},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1000, col: 1, offset: 21336},
			expr: &seqExpr{
				pos: position{line: 1001, col: 4, offset: 21348},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1001, col: 4, offset: 21348},
						val:        "and",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1001, col: 11, offset: 21355},
						expr: &ruleRefExpr{
							pos:  position{line: 1001, col: 12, offset: 21356},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1003, col: 1, offset: 21378},
			expr: &seqExpr{
				pos: position{line: 1004, col: 4, offset: 21389},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1004, col: 4, offset: 21389},
						val:        "or",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1004, col: 10, offset: 21395},
						expr: &ruleRefExpr{
							pos:  position{line: 1004, col: 11, offset: 21396},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1006, col: 1, offset: 21418},
			expr: &seqExpr{
				pos: position{line: 1007, col: 4, offset: 21430},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1007, col: 4, offset: 21430},
						val:        "not",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1007, col: 11, offset: 21437},
						expr: &ruleRefExpr{
							pos:  position{line: 1007, col: 12, offset: 21438},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1009, col: 1, offset: 21460},
			expr: &seqExpr{
				pos: position{line: 1010, col: 4, offset: 21471},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1010, col: 4, offset: 21471},
						val:        "in",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1010, col: 10, offset: 21477},
						expr: &ruleRefExpr{
							pos:  position{line: 1010, col: 11, offset: 21478},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "LikeToken",
			pos:  position{line: 1012, col: 1, offset: 21500},
			expr: &seqExpr{
				pos: position{line: 1013, col: 4, offset: 21513},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1013, col: 4, offset: 21513},
						val:        "like",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1013, col: 12, offset: 21521},
						expr: &ruleRefExpr{
							pos:  position{line: 1013, col: 13, offset: 21522},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "AscToken",
			pos:  position{line: 1015, col: 1, offset: 21544},
			expr: &actionExpr{
				pos: position{line: 1016, col: 4, offset: 21556},
				run: (*parser).callonAscToken1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 4, offset: 21556},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1016, col: 4, offset: 21556},
							val:        "asc",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1016, col: 11, offset: 21563},
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 12, offset: 21564},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "DescToken",
			pos:  position{line: 1019, col: 1, offset: 21618},
			expr: &actionExpr{
				pos: position{line: 1020, col: 4, offset: 21631},
				run: (*parser).callonDescToken1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 4, offset: 21631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1020, col: 4, offset: 21631},
							val:        "desc",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1020, col: 12, offset: 21639},
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 13, offset: 21640},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "CastToken",
			pos:  position{line: 1023, col: 1, offset: 21694},
			expr: &seqExpr{
				pos: position{line: 1024, col: 4, offset: 21707},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1024, col: 4, offset: 21707},
						val:        "cast",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1024, col: 12, offset: 21715},
						expr: &ruleRefExpr{
							pos:  position{line: 1024, col: 13, offset: 21716},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "AsToken",
			pos:  position{line: 1026, col: 1, offset: 21738},
			expr: &seqExpr{
				pos: position{line: 1027, col: 4, offset: 21749},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1027, col: 4, offset: 21749},
						val:        "as",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 1027, col: 10, offset: 21755},
						expr: &ruleRefExpr{
							pos:  position{line: 1027, col: 11, offset: 21756},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "SeparatorToken",
			pos:  position{line: 1029, col: 1, offset: 21778},
			expr: &litMatcher{
				pos:        position{line: 1030, col: 4, offset: 21796},
				val:        ",",
				ignoreCase: false,
			},
		},
		{
			name: "AnyToken",
			pos:  position{line: 1032, col: 1, offset: 21801},
			expr: &litMatcher{
				pos:        position{line: 1033, col: 4, offset: 21813},
				val:        "*",
				ignoreCase: false,
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1036, col: 1, offset: 21836},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 4, offset: 21850},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 4, offset: 21850},
						name: "NormalIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 4, offset: 21870},
						name: "StringIdentifier",
					},
				},
			},
		},
		{
			name: "NormalIdentifier",
			pos:  position{line: 1040, col: 1, offset: 21888},
			expr: &actionExpr{
				pos: position{line: 1041, col: 4, offset: 21908},
				run: (*parser).callonNormalIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 4, offset: 21908},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1041, col: 4, offset: 21908},
							name: "NormalIdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1041, col: 26, offset: 21930},
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 26, offset: 21930},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NormalIdentifierStart",
			pos:  position{line: 1048, col: 1, offset: 22040},
			expr: &charClassMatcher{
				pos:        position{line: 1049, col: 4, offset: 22065},
				val:        "[a-zA-Z@#_\\x80-\\xff]",
				chars:      []rune{'@', '#', '_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '\u0080', 'ÿ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NormalIdentifierRest",
			pos:  position{line: 1051, col: 1, offset: 22087},
			expr: &charClassMatcher{
				pos:        position{line: 1052, col: 4, offset: 22111},
				val:        "[a-zA-Z0-9@#$_\\x80-\\xff]",
				chars:      []rune{'@', '#', '$', '_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '\u0080', 'ÿ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "StringIdentifier",
			pos:  position{line: 1054, col: 1, offset: 22137},
			expr: &actionExpr{
				pos: position{line: 1055, col: 4, offset: 22157},
				run: (*parser).callonStringIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1055, col: 4, offset: 22157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1055, col: 4, offset: 22157},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 9, offset: 22162},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1055, col: 11, offset: 22164},
								expr: &actionExpr{
									pos: position{line: 1055, col: 13, offset: 22166},
									run: (*parser).callonStringIdentifier6,
									expr: &choiceExpr{
										pos: position{line: 1055, col: 15, offset: 22168},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1055, col: 15, offset: 22168},
												val:        "[^\"\\r\\n\\\\]",
												chars:      []rune{'"', '\r', '\n', '\\'},
												ignoreCase: false,
												inverted:   true,
											},
											&seqExpr{
												pos: position{line: 1055, col: 28, offset: 22181},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1055, col: 28, offset: 22181},
														val:        "\\",
														ignoreCase: false,
													},
													&anyMatcher{
														line: 1055, col: 33, offset: 22186,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1055, col: 63, offset: 22216},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1078, col: 1, offset: 22731},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1079, col: 4, offset: 22736},
				expr: &ruleRefExpr{
					pos:  position{line: 1079, col: 4, offset: 22736},
					name: "Whitespace",
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 1081, col: 1, offset: 22749},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 4, offset: 22763},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1082, col: 4, offset: 22763},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1083, col: 4, offset: 22784},
						val:        "\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1084, col: 4, offset: 22805},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1085, col: 4, offset: 22826},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1086, col: 4, offset: 22847},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1087, col: 4, offset: 22868},
						val:        " ",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1089, col: 1, offset: 22890},
			expr: &notExpr{
				pos: position{line: 1090, col: 4, offset: 22897},
				expr: &anyMatcher{
					line: 1090, col: 5, offset: 22898,
				},
			},
		},
	},
}

func (c *current) onS10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonS10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS10(stack["s"])
}

func (c *current) onS1(x, xs interface{}) (interface{}, error) {
	return prepend(x, assertSlice(xs)), nil
}

func (p *parser) callonS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS1(stack["x"], stack["xs"])
}

func (c *current) onSelectStmt9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSelectStmt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt9(stack["s"])
}

func (c *current) onSelectStmt18(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonSelectStmt18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt18(stack["i"])
}

func (c *current) onSelectStmt27(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonSelectStmt27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt27(stack["w"])
}

func (c *current) onSelectStmt34(g interface{}) (interface{}, error) {
	return g, nil
}

func (p *parser) callonSelectStmt34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt34(stack["g"])
}

func (c *current) onSelectStmt41(or interface{}) (interface{}, error) {
	return or, nil
}

func (p *parser) callonSelectStmt41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt41(stack["or"])
}

func (c *current) onSelectStmt48(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSelectStmt48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt48(stack["l"])
}

func (c *current) onSelectStmt55(of interface{}) (interface{}, error) {
	return of, nil
}

func (p *parser) callonSelectStmt55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt55(stack["of"])
}

func (c *current) onSelectStmt1(f, fs, table, where, group, order, limit, offset interface{}) (interface{}, error) {
	node := &ast.SelectStmtNode{}
	node.Column = assertExprSlice(prepend(f, assertSlice(fs)))
	if table != nil {
		node.Table = table.(*ast.IdentifierNode)
	}
	if where != nil {
		node.Where = where.(*ast.WhereOptionNode)
	}
	groupSlice := assertSlice(group)
	node.Group = make([]*ast.GroupOptionNode, len(groupSlice))
	for idx := range groupSlice {
		node.Group[idx] = groupSlice[idx].(*ast.GroupOptionNode)
	}
	orderSlice := assertSlice(order)
	node.Order = make([]*ast.OrderOptionNode, len(orderSlice))
	for idx := range orderSlice {
		node.Order[idx] = orderSlice[idx].(*ast.OrderOptionNode)
	}
	if limit != nil {
		node.Limit = limit.(*ast.LimitOptionNode)
	}
	if offset != nil {
		node.Offset = offset.(*ast.OffsetOptionNode)
	}
	return node, nil
}

func (p *parser) callonSelectStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt1(stack["f"], stack["fs"], stack["table"], stack["where"], stack["group"], stack["order"], stack["limit"], stack["offset"])
}

func (c *current) onUpdateStmt14(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonUpdateStmt14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt14(stack["s"])
}

func (c *current) onUpdateStmt23(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonUpdateStmt23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt23(stack["w"])
}

func (c *current) onUpdateStmt1(table, a, as, where interface{}) (interface{}, error) {
	node := &ast.UpdateStmtNode{}
	node.Table = table.(*ast.IdentifierNode)
	assignSlice := prepend(a, assertSlice(as))
	node.Assignment = make([]*ast.AssignOperatorNode, len(assignSlice))
	for idx := range assignSlice {
		node.Assignment[idx] = assignSlice[idx].(*ast.AssignOperatorNode)
	}
	if where != nil {
		node.Where = where.(*ast.WhereOptionNode)
	}
	return node, nil
}

func (p *parser) callonUpdateStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt1(stack["table"], stack["a"], stack["as"], stack["where"])
}

func (c *current) onDeleteStmt11(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDeleteStmt11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteStmt11(stack["w"])
}

func (c *current) onDeleteStmt1(table, where interface{}) (interface{}, error) {
	node := &ast.DeleteStmtNode{}
	node.Table = table.(*ast.IdentifierNode)
	if where != nil {
		node.Where = where.(*ast.WhereOptionNode)
	}
	return node, nil
}

func (p *parser) callonDeleteStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteStmt1(stack["table"], stack["where"])
}

func (c *current) onInsertStmt1(table, insert interface{}) (interface{}, error) {
	node := &ast.InsertStmtNode{}
	node.Table = table.(*ast.IdentifierNode)
	switch i := insert.(type) {
	case *ast.InsertWithColumnOptionNode:
		node.Insert = i
	case *ast.InsertWithDefaultOptionNode:
		node.Insert = i
	default:
		panic(fmt.Sprintf("unknown insert type %T", insert))
	}
	return node, nil
}

func (p *parser) callonInsertStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertStmt1(stack["table"], stack["insert"])
}

func (c *current) onInsertValue1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonInsertValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertValue1(stack["e"])
}

func (c *current) onCreateTableStmt20(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonCreateTableStmt20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt20(stack["t"])
}

func (c *current) onCreateTableStmt14(s, ss interface{}) (interface{}, error) {
	return prepend(s, assertSlice(ss)), nil
}

func (p *parser) callonCreateTableStmt14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt14(stack["s"], stack["ss"])
}

func (c *current) onCreateTableStmt1(table, column interface{}) (interface{}, error) {
	node := &ast.CreateTableStmtNode{}
	node.Table = table.(*ast.IdentifierNode)
	columnSlice := assertSlice(column)
	node.Column = make([]*ast.ColumnSchemaNode, len(columnSlice))
	for idx := range columnSlice {
		node.Column[idx] = columnSlice[idx].(*ast.ColumnSchemaNode)
	}
	return node, nil
}

func (p *parser) callonCreateTableStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt1(stack["table"], stack["column"])
}

func (c *current) onColumnSchema10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonColumnSchema10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnSchema10(stack["s"])
}

func (c *current) onColumnSchema1(i, t, cs interface{}) (interface{}, error) {
	node := &ast.ColumnSchemaNode{}
	node.Column = i.(*ast.IdentifierNode)
	node.DataType = t.(ast.TypeNode)
	constraintSlice := assertSlice(cs)
	node.Constraint = make([]ast.Node, len(constraintSlice))
	for idx, constraint := range constraintSlice {
		switch c := constraint.(type) {
		case *ast.PrimaryOptionNode:
			node.Constraint[idx] = c
		case *ast.NotNullOptionNode:
			node.Constraint[idx] = c
		case *ast.UniqueOptionNode:
			node.Constraint[idx] = c
		case *ast.DefaultOptionNode:
			node.Constraint[idx] = c
		case *ast.ForeignOptionNode:
			node.Constraint[idx] = c
		case *ast.AutoIncrementOptionNode:
			node.Constraint[idx] = c
		default:
			panic(fmt.Sprintf("unknown constraint type %T", c))
		}
	}
	return node, nil
}

func (p *parser) callonColumnSchema1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnSchema1(stack["i"], stack["t"], stack["cs"])
}

func (c *current) onCreateIndexStmt6(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonCreateIndexStmt6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt6(stack["u"])
}

func (c *current) onCreateIndexStmt28(x interface{}) (interface{}, error) {
	return x, nil
}

func (p *parser) callonCreateIndexStmt28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt28(stack["x"])
}

func (c *current) onCreateIndexStmt1(unique, index, table, i, is interface{}) (interface{}, error) {
	node := &ast.CreateIndexStmtNode{}
	node.Index = index.(*ast.IdentifierNode)
	node.Table = table.(*ast.IdentifierNode)
	columnSlice := assertSlice(prepend(i, assertSlice(is)))
	node.Column = make([]*ast.IdentifierNode, len(columnSlice))
	for idx := range columnSlice {
		node.Column[idx] = columnSlice[idx].(*ast.IdentifierNode)
	}
	if unique != nil {
		node.Unique = unique.(*ast.UniqueOptionNode)
	}
	return node, nil
}

func (p *parser) callonCreateIndexStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt1(stack["unique"], stack["index"], stack["table"], stack["i"], stack["is"])
}

func (c *current) onWhereClause1(e interface{}) (interface{}, error) {
	node := &ast.WhereOptionNode{}
	node.Condition = e.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["e"])
}

func (c *current) onOrderByClause11(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonOrderByClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause11(stack["s"])
}

func (c *current) onOrderByClause1(f, fs interface{}) (interface{}, error) {
	return prepend(f, assertSlice(fs)), nil
}

func (p *parser) callonOrderByClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause1(stack["f"], stack["fs"])
}

func (c *current) onOrderColumn7(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOrderColumn7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn7(stack["t"])
}

func (c *current) onOrderColumn16(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonOrderColumn16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn16(stack["l"])
}

func (c *current) onOrderColumn1(i, s, n interface{}) (interface{}, error) {
	node := &ast.OrderOptionNode{}
	node.Expr = i.(ast.ExprNode)
	node.Desc = s != nil && string(s.([]byte)) == "desc"
	node.NullsFirst = n != nil && string(n.([]byte)) == "first"
	return node, nil
}

func (p *parser) callonOrderColumn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn1(stack["i"], stack["s"], stack["n"])
}

func (c *current) onGroupByClause11(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGroupByClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByClause11(stack["s"])
}

func (c *current) onGroupByClause1(f, fs interface{}) (interface{}, error) {
	return prepend(f, assertSlice(fs)), nil
}

func (p *parser) callonGroupByClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByClause1(stack["f"], stack["fs"])
}

func (c *current) onGroupColumn1(i interface{}) (interface{}, error) {
	node := &ast.GroupOptionNode{}
	node.Expr = i.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonGroupColumn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupColumn1(stack["i"])
}

func (c *current) onOffsetClause1(i interface{}) (interface{}, error) {
	node := &ast.OffsetOptionNode{}
	node.Value = i.(*ast.IntegerValueNode)
	return node, nil
}

func (p *parser) callonOffsetClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetClause1(stack["i"])
}

func (c *current) onLimitClause1(i interface{}) (interface{}, error) {
	node := &ast.LimitOptionNode{}
	node.Value = i.(*ast.IntegerValueNode)
	return node, nil
}

func (p *parser) callonLimitClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitClause1(stack["i"])
}

func (c *current) onInsertWithColumnClause13(x interface{}) (interface{}, error) {
	return x, nil
}

func (p *parser) callonInsertWithColumnClause13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause13(stack["x"])
}

func (c *current) onInsertWithColumnClause5(f, fs interface{}) (interface{}, error) {
	return prepend(f, assertSlice(fs)), nil
}

func (p *parser) callonInsertWithColumnClause5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause5(stack["f"], stack["fs"])
}

func (c *current) onInsertWithColumnClause29(y interface{}) (interface{}, error) {
	return y, nil
}

func (p *parser) callonInsertWithColumnClause29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause29(stack["y"])
}

func (c *current) onInsertWithColumnClause1(cs, v, vs interface{}) (interface{}, error) {
	node := &ast.InsertWithColumnOptionNode{}
	columnSlice := assertSlice(cs)
	node.Column = make([]*ast.IdentifierNode, len(columnSlice))
	for idx := range columnSlice {
		node.Column[idx] = columnSlice[idx].(*ast.IdentifierNode)
	}
	valueSlice := assertSlice(vs)
	node.Value = make([][]ast.ExprNode, len(valueSlice)+1)
	node.Value[0] = v.([]ast.ExprNode)
	for idx := range valueSlice {
		node.Value[idx+1] = valueSlice[idx].([]ast.ExprNode)
	}
	return node, nil
}

func (p *parser) callonInsertWithColumnClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause1(stack["cs"], stack["v"], stack["vs"])
}

func (c *current) onInsertWithDefaultClause1() (interface{}, error) {
	node := &ast.InsertWithDefaultOptionNode{}
	return node, nil
}

func (p *parser) callonInsertWithDefaultClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithDefaultClause1()
}

func (c *current) onPrimaryKeyClause1() (interface{}, error) {
	node := &ast.PrimaryOptionNode{}
	return node, nil
}

func (p *parser) callonPrimaryKeyClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryKeyClause1()
}

func (c *current) onNotNullClause1() (interface{}, error) {
	node := &ast.NotNullOptionNode{}
	return node, nil
}

func (p *parser) callonNotNullClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotNullClause1()
}

func (c *current) onUniqueClause1() (interface{}, error) {
	node := &ast.UniqueOptionNode{}
	return node, nil
}

func (p *parser) callonUniqueClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqueClause1()
}

func (c *current) onDefaultClause1(e interface{}) (interface{}, error) {
	node := &ast.DefaultOptionNode{}
	node.Value = e.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonDefaultClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultClause1(stack["e"])
}

func (c *current) onForeignClause1(t, f interface{}) (interface{}, error) {
	node := &ast.ForeignOptionNode{}
	node.Table = t.(*ast.IdentifierNode)
	node.Column = f.(*ast.IdentifierNode)
	return node, nil
}

func (p *parser) callonForeignClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForeignClause1(stack["t"], stack["f"])
}

func (c *current) onAutoincrementClause1() (interface{}, error) {
	node := &ast.AutoIncrementOptionNode{}
	return node, nil
}

func (p *parser) callonAutoincrementClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAutoincrementClause1()
}

func (c *current) onExprWithDefault2(d interface{}) (interface{}, error) {
	return d, nil
}

func (p *parser) callonExprWithDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprWithDefault2(stack["d"])
}

func (c *current) onLogicExpr47(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr47(stack["op"], stack["s"])
}

func (c *current) onLogicExpr41(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonLogicExpr41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr41(stack["o"], stack["os"])
}

func (c *current) onLogicExpr37(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr37(stack["op"], stack["s"])
}

func (c *current) onLogicExpr31(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonLogicExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr31(stack["o"], stack["os"])
}

func (c *current) onLogicExpr22(op, s interface{}) (interface{}, error) {
	return opSetTarget(op.(ast.UnaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr22(stack["op"], stack["s"])
}

func (c *current) onLogicExpr17(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonLogicExpr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr17(stack["l"])
}

func (c *current) onLogicExpr11(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonLogicExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr11(stack["o"], stack["os"])
}

func (c *current) onLogicExpr1In5(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1In5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1In5(stack["t"])
}

func (c *current) onLogicExpr1In1(n, s interface{}) (interface{}, error) {
	node := &ast.InOperatorNode{}
	node.Right = s.([]ast.ExprNode)
	if n != nil {
		return opSetTarget(n.(ast.UnaryOperator), node), nil
	}
	return node, nil
}

func (p *parser) callonLogicExpr1In1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1In1(stack["n"], stack["s"])
}

func (c *current) onLogicExpr1Is6(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1Is6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Is6(stack["t"])
}

func (c *current) onLogicExpr1Is1(n interface{}) (interface{}, error) {
	node := &ast.IsOperatorNode{}
	null := &ast.NullValueNode{}
	opSetSubject(node, null)
	if n != nil {
		return opSetTarget(n.(ast.UnaryOperator), node), nil
	}
	return node, nil
}

func (p *parser) callonLogicExpr1Is1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Is1(stack["n"])
}

func (c *current) onLogicExpr1Like5(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1Like5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like5(stack["t"])
}

func (c *current) onLogicExpr1Like1(n, s interface{}) (interface{}, error) {
	node := &ast.LikeOperatorNode{}
	opSetSubject(node, s.(ast.ExprNode))
	if n != nil {
		return opSetTarget(n.(ast.UnaryOperator), node), nil
	}
	return node, nil
}

func (p *parser) callonLogicExpr1Like1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like1(stack["n"], stack["s"])
}

func (c *current) onLogicExpr1Cmp1(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr1Cmp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Cmp1(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr37(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonArithmeticExpr37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr37(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr31(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonArithmeticExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr31(stack["o"], stack["os"])
}

func (c *current) onArithmeticExpr27(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonArithmeticExpr27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr27(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr21(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonArithmeticExpr21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr21(stack["o"], stack["os"])
}

func (c *current) onArithmeticExpr17(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonArithmeticExpr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr17(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr11(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonArithmeticExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr11(stack["o"], stack["os"])
}

func (c *current) onMultiExpr7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMultiExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExpr7(stack["e"])
}

func (c *current) onMultiExpr1(x, xs interface{}) (interface{}, error) {
	return assertExprSlice(prepend(x, assertSlice(xs))), nil
}

func (p *parser) callonMultiExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExpr1(stack["x"], stack["xs"])
}

func (c *current) onMultiExprWithDefault7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMultiExprWithDefault7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExprWithDefault7(stack["e"])
}

func (c *current) onMultiExprWithDefault1(x, xs interface{}) (interface{}, error) {
	return assertExprSlice(prepend(x, assertSlice(xs))), nil
}

func (p *parser) callonMultiExprWithDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExprWithDefault1(stack["x"], stack["xs"])
}

func (c *current) onOperand2(op, s interface{}) (interface{}, error) {
	return opSetTarget(op.(ast.UnaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonOperand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand2(stack["op"], stack["s"])
}

func (c *current) onOperand9(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonOperand9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand9(stack["e"])
}

func (c *current) onOperand17(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOperand17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand17(stack["t"])
}

func (c *current) onTypeCast1(o, s interface{}) (interface{}, error) {
	node := &ast.CastOperatorNode{}
	node.SourceExpr = o.(ast.ExprNode)
	node.TargetType = s.(ast.TypeNode)
	return node, nil
}

func (p *parser) callonTypeCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeCast1(stack["o"], stack["s"])
}

func (c *current) onFunctionCall1(i, r interface{}) (interface{}, error) {
	node := &ast.FunctionOperatorNode{}
	node.Name = i.(*ast.IdentifierNode)
	if r != nil {
		node.Args = r.([]ast.ExprNode)
	}
	return node, nil
}

func (p *parser) callonFunctionCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionCall1(stack["i"], stack["r"])
}

func (c *current) onFunctionArgs2(a interface{}) (interface{}, error) {
	return []ast.ExprNode{a.(*ast.AnyValueNode)}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["a"])
}

func (c *current) onAssignment1(i, e interface{}) (interface{}, error) {
	node := &ast.AssignOperatorNode{}
	node.Column = i.(*ast.IdentifierNode)
	node.Expr = e.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["i"], stack["e"])
}

func (c *current) onSignOperator1() (interface{}, error) {
	var node ast.UnaryOperator
	switch string(c.text) {
	case "+":
		node = &ast.PosOperatorNode{}
	case "-":
		node = &ast.NegOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown sign %s", c.text))
	}
	return node, nil
}

func (p *parser) callonSignOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSignOperator1()
}

func (c *current) onNotOperator1() (interface{}, error) {
	node := &ast.NotOperatorNode{}
	return node, nil
}

func (p *parser) callonNotOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotOperator1()
}

func (c *current) onAndOperator1() (interface{}, error) {
	node := &ast.AndOperatorNode{}
	return node, nil
}

func (p *parser) callonAndOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndOperator1()
}

func (c *current) onOrOperator1() (interface{}, error) {
	node := &ast.OrOperatorNode{}
	return node, nil
}

func (p *parser) callonOrOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrOperator1()
}

func (c *current) onCmpOperator1() (interface{}, error) {
	var node ast.BinaryOperator
	switch string(c.text) {
	case "<=":
		node = &ast.LessOrEqualOperatorNode{}
	case ">=":
		node = &ast.GreaterOrEqualOperatorNode{}
	case "<>":
		node = &ast.NotEqualOperatorNode{}
	case "!=":
		node = &ast.NotEqualOperatorNode{}
	case "<":
		node = &ast.LessOperatorNode{}
	case ">":
		node = &ast.GreaterOperatorNode{}
	case "=":
		node = &ast.EqualOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown comparison operator %s", c.text))
	}
	return node, nil
}

func (p *parser) callonCmpOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCmpOperator1()
}

func (c *current) onConcatOperator1() (interface{}, error) {
	node := &ast.ConcatOperatorNode{}
	return node, nil
}

func (p *parser) callonConcatOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatOperator1()
}

func (c *current) onAddSubOperator1() (interface{}, error) {
	var node ast.BinaryOperator
	switch string(c.text) {
	case "+":
		node = &ast.AddOperatorNode{}
	case "-":
		node = &ast.SubOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown addition or subtraction operator %s", c.text))
	}
	return node, nil
}

func (p *parser) callonAddSubOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddSubOperator1()
}

func (c *current) onMulDivModOperator1() (interface{}, error) {
	var node ast.BinaryOperator
	switch string(c.text) {
	case "*":
		node = &ast.MulOperatorNode{}
	case "/":
		node = &ast.DivOperatorNode{}
	case "%":
		node = &ast.ModOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown multiplication, division, modulo operator: %s", c.text))
	}
	return node, nil
}

func (p *parser) callonMulDivModOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMulDivModOperator1()
}

func (c *current) onUIntType1(s interface{}) (interface{}, error) {
	node := &ast.IntTypeNode{}
	node.Unsigned = true
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "UIntType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonUIntType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntType1(stack["s"])
}

func (c *current) onIntType1(s interface{}) (interface{}, error) {
	node := &ast.IntTypeNode{}
	node.Unsigned = false
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "IntType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonIntType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntType1(stack["s"])
}

func (c *current) onUFixedType1(s, t interface{}) (interface{}, error) {
	node := &ast.FixedTypeNode{}
	node.Unsigned = true
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "UFixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	fractionalDigits, code := toUint(t.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "UFixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", t, code),
		}
		return node, err
	}
	node.Size = size
	node.FractionalDigits = fractionalDigits
	return node, nil
}

func (p *parser) callonUFixedType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUFixedType1(stack["s"], stack["t"])
}

func (c *current) onFixedType1(s, t interface{}) (interface{}, error) {
	node := &ast.FixedTypeNode{}
	node.Unsigned = false
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "FixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	fractionalDigits, code := toUint(t.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "FixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", t, code),
		}
		return node, err
	}
	node.Size = size
	node.FractionalDigits = fractionalDigits
	return node, nil
}

func (p *parser) callonFixedType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedType1(stack["s"], stack["t"])
}

func (c *current) onFixedBytesType2(s interface{}) (interface{}, error) {
	node := &ast.FixedBytesTypeNode{}
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "FixedBytesType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonFixedBytesType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedBytesType2(stack["s"])
}

func (c *current) onFixedBytesType9() (interface{}, error) {
	node := &ast.FixedBytesTypeNode{}
	node.Size = 1
	return node, nil
}

func (p *parser) callonFixedBytesType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedBytesType9()
}

func (c *current) onDynamicBytesType1() (interface{}, error) {
	node := &ast.DynamicBytesTypeNode{}
	return node, nil
}

func (p *parser) callonDynamicBytesType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDynamicBytesType1()
}

func (c *current) onAddressType1() (interface{}, error) {
	node := &ast.AddressTypeNode{}
	return node, nil
}

func (p *parser) callonAddressType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressType1()
}

func (c *current) onBoolType1() (interface{}, error) {
	node := &ast.BoolTypeNode{}
	return node, nil
}

func (p *parser) callonBoolType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolType1()
}

func (c *current) onAnyLiteral1() (interface{}, error) {
	node := &ast.AnyValueNode{}
	return node, nil
}

func (p *parser) callonAnyLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyLiteral1()
}

func (c *current) onDefaultLiteral1() (interface{}, error) {
	node := &ast.DefaultValueNode{}
	return node, nil
}

func (p *parser) callonDefaultLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultLiteral1()
}

func (c *current) onBoolLiteral1(b interface{}) (interface{}, error) {
	node := &ast.BoolValueNode{}
	node.V = string(b.([]byte)) == "true"
	return node, nil
}

func (p *parser) callonBoolLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolLiteral1(stack["b"])
}

func (c *current) onNullLiteral1() (interface{}, error) {
	node := &ast.NullValueNode{}
	return node, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onNumberLiteral2(h interface{}) (interface{}, error) {
	return h, nil
}

func (p *parser) callonNumberLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral2(stack["h"])
}

func (c *current) onInteger1() (interface{}, error) {
	node := &ast.IntegerValueNode{}
	node.IsAddress = false
	v, code := toDecimal(c.text)
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "Integer",
			Message:  fmt.Sprintf("cannot parse %s as decimal: %v", c.text, code),
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onNonZeroLeadingInteger1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNonZeroLeadingInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonZeroLeadingInteger1()
}

func (c *current) onDecimal1() (interface{}, error) {
	node := &ast.DecimalValueNode{}
	v, code := toDecimal(c.text)
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "Decimal",
			Message:  fmt.Sprintf("cannot parse %s as decimal: %v", c.text, code),
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonDecimal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimal1()
}

func (c *current) onHex1(s interface{}) (interface{}, error) {
	return hexToInteger(joinBytes(assertSlice(s))), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1(stack["s"])
}

func (c *current) onHexString9() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonHexString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexString9()
}

func (c *current) onHexString1(s interface{}) (interface{}, error) {
	node := &ast.BytesValueNode{}
	node.V = hexToBytes(joinBytes(assertSlice(s)))
	return node, nil
}

func (p *parser) callonHexString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexString1(stack["s"])
}

func (c *current) onNormalString6() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNormalString6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalString6()
}

func (c *current) onNormalString1(s interface{}) (interface{}, error) {
	node := &ast.BytesValueNode{}
	bs := joinBytes(assertSlice(s))
	v, bad, code := resolveString(bs)
	if code != errors.ErrorCodeNil {
		msg := fmt.Sprintf("cannot resolve escape sequence '%s': %v",
			sanitizeBadEscape(bad), code)
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "NormalString",
			Message:  msg,
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonNormalString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalString1(stack["s"])
}

func (c *current) onTrueToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonTrueToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrueToken1()
}

func (c *current) onFalseToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonFalseToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFalseToken1()
}

func (c *current) onLastToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonLastToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLastToken1()
}

func (c *current) onFirstToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonFirstToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstToken1()
}

func (c *current) onAscToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonAscToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAscToken1()
}

func (c *current) onDescToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonDescToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescToken1()
}

func (c *current) onNormalIdentifier1() (interface{}, error) {
	node := &ast.IdentifierNode{}
	node.Name = decodeString(c.text)
	return node, nil
}

func (p *parser) callonNormalIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalIdentifier1()
}

func (c *current) onStringIdentifier6() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonStringIdentifier6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringIdentifier6()
}

func (c *current) onStringIdentifier1(s interface{}) (interface{}, error) {
	node := &ast.IdentifierNode{}
	bs := joinBytes(assertSlice(s))
	name, bad, code := resolveString(bs)
	if code != errors.ErrorCodeNil {
		msg := fmt.Sprintf("cannot resolve escape sequence '%s': %v",
			sanitizeBadEscape(bad), code)
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "StringIdentifier",
			Message:  msg,
		}
		return node, err
	}
	node.Name = name
	return node, nil
}

func (p *parser) callonStringIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringIdentifier1(stack["s"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = goerrors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = goerrors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = goerrors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = goerrors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// parseFile parses the file identified by filename.
func parseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return parseReader(filename, f, opts...)
}

// parseReader parses the data from r using filename as information in the
// error messages.
func parseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return parse(filename, b, opts...)
}

// parse parses the data from b using filename as information in the
// error messages.
func parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(goerrors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
