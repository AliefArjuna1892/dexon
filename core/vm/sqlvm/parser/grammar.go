// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	goerrors "errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/dexon-foundation/dexon/core/vm/sqlvm/ast"
	"github.com/dexon-foundation/dexon/core/vm/sqlvm/errors"
	"github.com/shopspring/decimal"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "S",
			pos:  position{line: 10, col: 1, offset: 145},
			expr: &actionExpr{
				pos: position{line: 11, col: 5, offset: 151},
				run: (*parser).callonS1,
				expr: &seqExpr{
					pos: position{line: 11, col: 5, offset: 151},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 11, col: 5, offset: 151},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 7, offset: 153},
							label: "x",
							expr: &zeroOrOneExpr{
								pos: position{line: 11, col: 9, offset: 155},
								expr: &ruleRefExpr{
									pos:  position{line: 11, col: 9, offset: 155},
									name: "Stmt",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 15, offset: 161},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 17, offset: 163},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 11, col: 20, offset: 166},
								expr: &actionExpr{
									pos: position{line: 11, col: 22, offset: 168},
									run: (*parser).callonS10,
									expr: &seqExpr{
										pos: position{line: 11, col: 22, offset: 168},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 11, col: 22, offset: 168},
												val:        ";",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 26, offset: 172},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 11, col: 28, offset: 174},
												label: "s",
												expr: &zeroOrOneExpr{
													pos: position{line: 11, col: 30, offset: 176},
													expr: &ruleRefExpr{
														pos:  position{line: 11, col: 30, offset: 176},
														name: "Stmt",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 36, offset: 182},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 59, offset: 205},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Stmt",
			pos:  position{line: 15, col: 1, offset: 258},
			expr: &choiceExpr{
				pos: position{line: 16, col: 4, offset: 266},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 16, col: 4, offset: 266},
						name: "SelectStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 17, col: 4, offset: 280},
						name: "UpdateStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 18, col: 4, offset: 294},
						name: "DeleteStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 19, col: 4, offset: 308},
						name: "InsertStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 4, offset: 322},
						name: "CreateTableStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 21, col: 4, offset: 341},
						name: "CreateIndexStmt",
					},
				},
			},
		},
		{
			name: "SelectStmt",
			pos:  position{line: 23, col: 1, offset: 358},
			expr: &actionExpr{
				pos: position{line: 24, col: 4, offset: 372},
				run: (*parser).callonSelectStmt1,
				expr: &seqExpr{
					pos: position{line: 24, col: 4, offset: 372},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 4, offset: 372},
							name: "SelectToken",
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 2, offset: 385},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 25, col: 4, offset: 387},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 6, offset: 389},
								name: "SelectColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 25, col: 19, offset: 402},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 25, col: 22, offset: 405},
								expr: &actionExpr{
									pos: position{line: 25, col: 24, offset: 407},
									run: (*parser).callonSelectStmt9,
									expr: &seqExpr{
										pos: position{line: 25, col: 24, offset: 407},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 25, col: 24, offset: 407},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 25, col: 26, offset: 409},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 25, col: 41, offset: 424},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 25, col: 43, offset: 426},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 25, col: 45, offset: 428},
													name: "SelectColumn",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 26, col: 2, offset: 463},
							label: "table",
							expr: &zeroOrOneExpr{
								pos: position{line: 26, col: 8, offset: 469},
								expr: &actionExpr{
									pos: position{line: 26, col: 10, offset: 471},
									run: (*parser).callonSelectStmt18,
									expr: &seqExpr{
										pos: position{line: 26, col: 10, offset: 471},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 26, col: 10, offset: 471},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 26, col: 12, offset: 473},
												name: "FromToken",
											},
											&ruleRefExpr{
												pos:  position{line: 26, col: 22, offset: 483},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 26, col: 24, offset: 485},
												label: "i",
												expr: &ruleRefExpr{
													pos:  position{line: 26, col: 26, offset: 487},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 27, col: 2, offset: 520},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 27, col: 8, offset: 526},
								expr: &actionExpr{
									pos: position{line: 27, col: 10, offset: 528},
									run: (*parser).callonSelectStmt27,
									expr: &seqExpr{
										pos: position{line: 27, col: 10, offset: 528},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 27, col: 10, offset: 528},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 27, col: 12, offset: 530},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 27, col: 14, offset: 532},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 2, offset: 566},
							label: "group",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 8, offset: 572},
								expr: &actionExpr{
									pos: position{line: 28, col: 10, offset: 574},
									run: (*parser).callonSelectStmt34,
									expr: &seqExpr{
										pos: position{line: 28, col: 10, offset: 574},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 28, col: 10, offset: 574},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 28, col: 12, offset: 576},
												label: "g",
												expr: &ruleRefExpr{
													pos:  position{line: 28, col: 14, offset: 578},
													name: "GroupByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 29, col: 2, offset: 614},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 29, col: 8, offset: 620},
								expr: &actionExpr{
									pos: position{line: 29, col: 10, offset: 622},
									run: (*parser).callonSelectStmt41,
									expr: &seqExpr{
										pos: position{line: 29, col: 10, offset: 622},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 29, col: 10, offset: 622},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 29, col: 12, offset: 624},
												label: "or",
												expr: &ruleRefExpr{
													pos:  position{line: 29, col: 15, offset: 627},
													name: "OrderByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 2, offset: 664},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 30, col: 8, offset: 670},
								expr: &actionExpr{
									pos: position{line: 30, col: 10, offset: 672},
									run: (*parser).callonSelectStmt48,
									expr: &seqExpr{
										pos: position{line: 30, col: 10, offset: 672},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 10, offset: 672},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 30, col: 12, offset: 674},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 30, col: 14, offset: 676},
													name: "LimitClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 2, offset: 710},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 31, col: 9, offset: 717},
								expr: &actionExpr{
									pos: position{line: 31, col: 11, offset: 719},
									run: (*parser).callonSelectStmt55,
									expr: &seqExpr{
										pos: position{line: 31, col: 11, offset: 719},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 31, col: 11, offset: 719},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 31, col: 13, offset: 721},
												label: "of",
												expr: &ruleRefExpr{
													pos:  position{line: 31, col: 16, offset: 724},
													name: "OffsetClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectColumn",
			pos:  position{line: 66, col: 1, offset: 1408},
			expr: &choiceExpr{
				pos: position{line: 67, col: 4, offset: 1424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 67, col: 4, offset: 1424},
						name: "AnyLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 4, offset: 1438},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "UpdateStmt",
			pos:  position{line: 70, col: 1, offset: 1444},
			expr: &actionExpr{
				pos: position{line: 71, col: 4, offset: 1458},
				run: (*parser).callonUpdateStmt1,
				expr: &seqExpr{
					pos: position{line: 71, col: 4, offset: 1458},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 71, col: 4, offset: 1458},
							name: "UpdateToken",
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 2, offset: 1471},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 4, offset: 1473},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 10, offset: 1479},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 2, offset: 1491},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 4, offset: 1493},
							name: "SetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 2, offset: 1503},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 4, offset: 1505},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 6, offset: 1507},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 17, offset: 1518},
							label: "as",
							expr: &zeroOrMoreExpr{
								pos: position{line: 74, col: 20, offset: 1521},
								expr: &actionExpr{
									pos: position{line: 74, col: 22, offset: 1523},
									run: (*parser).callonUpdateStmt14,
									expr: &seqExpr{
										pos: position{line: 74, col: 22, offset: 1523},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 74, col: 22, offset: 1523},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 74, col: 24, offset: 1525},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 74, col: 39, offset: 1540},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 74, col: 41, offset: 1542},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 74, col: 43, offset: 1544},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 75, col: 2, offset: 1577},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 75, col: 8, offset: 1583},
								expr: &actionExpr{
									pos: position{line: 75, col: 10, offset: 1585},
									run: (*parser).callonUpdateStmt23,
									expr: &seqExpr{
										pos: position{line: 75, col: 10, offset: 1585},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 75, col: 10, offset: 1585},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 75, col: 12, offset: 1587},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 75, col: 14, offset: 1589},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DeleteStmt",
			pos:  position{line: 91, col: 1, offset: 1877},
			expr: &actionExpr{
				pos: position{line: 92, col: 4, offset: 1891},
				run: (*parser).callonDeleteStmt1,
				expr: &seqExpr{
					pos: position{line: 92, col: 4, offset: 1891},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 92, col: 4, offset: 1891},
							name: "DeleteToken",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 2, offset: 1904},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 4, offset: 1906},
							name: "FromToken",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 2, offset: 1917},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 4, offset: 1919},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 94, col: 10, offset: 1925},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 2, offset: 1937},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 8, offset: 1943},
								expr: &actionExpr{
									pos: position{line: 95, col: 10, offset: 1945},
									run: (*parser).callonDeleteStmt11,
									expr: &seqExpr{
										pos: position{line: 95, col: 10, offset: 1945},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 95, col: 10, offset: 1945},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 95, col: 12, offset: 1947},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 95, col: 14, offset: 1949},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertStmt",
			pos:  position{line: 110, col: 1, offset: 2197},
			expr: &actionExpr{
				pos: position{line: 111, col: 4, offset: 2211},
				run: (*parser).callonInsertStmt1,
				expr: &seqExpr{
					pos: position{line: 111, col: 4, offset: 2211},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 111, col: 4, offset: 2211},
							name: "InsertToken",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 2, offset: 2224},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 4, offset: 2226},
							name: "IntoToken",
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 2, offset: 2237},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 4, offset: 2239},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 10, offset: 2245},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 2, offset: 2257},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 4, offset: 2259},
							label: "insert",
							expr: &choiceExpr{
								pos: position{line: 114, col: 13, offset: 2268},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 114, col: 13, offset: 2268},
										name: "InsertWithColumnClause",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 38, offset: 2293},
										name: "InsertWithDefaultClause",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertValue",
			pos:  position{line: 122, col: 1, offset: 2416},
			expr: &actionExpr{
				pos: position{line: 123, col: 4, offset: 2431},
				run: (*parser).callonInsertValue1,
				expr: &seqExpr{
					pos: position{line: 123, col: 4, offset: 2431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 123, col: 4, offset: 2431},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 8, offset: 2435},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 10, offset: 2437},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 12, offset: 2439},
								name: "MultiExprWithDefault",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 33, offset: 2460},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 123, col: 35, offset: 2462},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CreateTableStmt",
			pos:  position{line: 126, col: 1, offset: 2485},
			expr: &actionExpr{
				pos: position{line: 127, col: 4, offset: 2504},
				run: (*parser).callonCreateTableStmt1,
				expr: &seqExpr{
					pos: position{line: 127, col: 4, offset: 2504},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 127, col: 4, offset: 2504},
							name: "CreateToken",
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 2, offset: 2517},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 4, offset: 2519},
							name: "TableToken",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 2, offset: 2531},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 129, col: 4, offset: 2533},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 10, offset: 2539},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 2, offset: 2551},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 4, offset: 2553},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 131, col: 2, offset: 2558},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 4, offset: 2560},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 131, col: 11, offset: 2567},
								expr: &actionExpr{
									pos: position{line: 132, col: 3, offset: 2571},
									run: (*parser).callonCreateTableStmt14,
									expr: &seqExpr{
										pos: position{line: 132, col: 3, offset: 2571},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 132, col: 3, offset: 2571},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 132, col: 5, offset: 2573},
													name: "ColumnSchema",
												},
											},
											&labeledExpr{
												pos:   position{line: 133, col: 3, offset: 2588},
												label: "ss",
												expr: &zeroOrMoreExpr{
													pos: position{line: 133, col: 6, offset: 2591},
													expr: &actionExpr{
														pos: position{line: 133, col: 8, offset: 2593},
														run: (*parser).callonCreateTableStmt20,
														expr: &seqExpr{
															pos: position{line: 133, col: 8, offset: 2593},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 133, col: 8, offset: 2593},
																	name: "_",
																},
																&ruleRefExpr{
																	pos:  position{line: 133, col: 10, offset: 2595},
																	name: "SeparatorToken",
																},
																&ruleRefExpr{
																	pos:  position{line: 133, col: 25, offset: 2610},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 133, col: 27, offset: 2612},
																	label: "t",
																	expr: &ruleRefExpr{
																		pos:  position{line: 133, col: 29, offset: 2614},
																		name: "ColumnSchema",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 2, offset: 2686},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 2688},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ColumnSchema",
			pos:  position{line: 144, col: 1, offset: 2803},
			expr: &actionExpr{
				pos: position{line: 145, col: 4, offset: 2819},
				run: (*parser).callonColumnSchema1,
				expr: &seqExpr{
					pos: position{line: 145, col: 4, offset: 2819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 145, col: 4, offset: 2819},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 145, col: 6, offset: 2821},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 2, offset: 2833},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 4, offset: 2835},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 6, offset: 2837},
								name: "DataType",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 2, offset: 2847},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 147, col: 5, offset: 2850},
								expr: &actionExpr{
									pos: position{line: 147, col: 7, offset: 2852},
									run: (*parser).callonColumnSchema10,
									expr: &seqExpr{
										pos: position{line: 147, col: 7, offset: 2852},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 7, offset: 2852},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 147, col: 9, offset: 2854},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 147, col: 11, offset: 2856},
													name: "ColumnConstraint",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnConstraint",
			pos:  position{line: 156, col: 1, offset: 3019},
			expr: &choiceExpr{
				pos: position{line: 157, col: 4, offset: 3039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 157, col: 4, offset: 3039},
						name: "PrimaryKeyClause",
					},
					&ruleRefExpr{
						pos:  position{line: 158, col: 4, offset: 3059},
						name: "NotNullClause",
					},
					&ruleRefExpr{
						pos:  position{line: 159, col: 4, offset: 3076},
						name: "UniqueClause",
					},
					&ruleRefExpr{
						pos:  position{line: 160, col: 4, offset: 3092},
						name: "DefaultClause",
					},
					&ruleRefExpr{
						pos:  position{line: 161, col: 4, offset: 3109},
						name: "ForeignClause",
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 4, offset: 3126},
						name: "AutoincrementClause",
					},
				},
			},
		},
		{
			name: "CreateIndexStmt",
			pos:  position{line: 164, col: 1, offset: 3147},
			expr: &actionExpr{
				pos: position{line: 165, col: 4, offset: 3166},
				run: (*parser).callonCreateIndexStmt1,
				expr: &seqExpr{
					pos: position{line: 165, col: 4, offset: 3166},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 165, col: 4, offset: 3166},
							name: "CreateToken",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 2, offset: 3179},
							label: "unique",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 9, offset: 3186},
								expr: &actionExpr{
									pos: position{line: 166, col: 11, offset: 3188},
									run: (*parser).callonCreateIndexStmt6,
									expr: &seqExpr{
										pos: position{line: 166, col: 11, offset: 3188},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 166, col: 11, offset: 3188},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 166, col: 13, offset: 3190},
												label: "u",
												expr: &ruleRefExpr{
													pos:  position{line: 166, col: 15, offset: 3192},
													name: "UniqueClause",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 2, offset: 3227},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 4, offset: 3229},
							name: "IndexToken",
						},
						&ruleRefExpr{
							pos:  position{line: 168, col: 2, offset: 3241},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 4, offset: 3243},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 10, offset: 3249},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 2, offset: 3261},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 4, offset: 3263},
							name: "OnToken",
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 2, offset: 3272},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 4, offset: 3274},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 10, offset: 3280},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 2, offset: 3292},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 4, offset: 3294},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 8, offset: 3298},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 10, offset: 3300},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 12, offset: 3302},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 23, offset: 3313},
							label: "is",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 26, offset: 3316},
								expr: &actionExpr{
									pos: position{line: 171, col: 28, offset: 3318},
									run: (*parser).callonCreateIndexStmt28,
									expr: &seqExpr{
										pos: position{line: 171, col: 28, offset: 3318},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 171, col: 28, offset: 3318},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 171, col: 30, offset: 3320},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 171, col: 45, offset: 3335},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 171, col: 47, offset: 3337},
												label: "x",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 49, offset: 3339},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 81, offset: 3371},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 83, offset: 3373},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 189, col: 1, offset: 3684},
			expr: &actionExpr{
				pos: position{line: 190, col: 4, offset: 3699},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 190, col: 4, offset: 3699},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 190, col: 4, offset: 3699},
							name: "WhereToken",
						},
						&ruleRefExpr{
							pos:  position{line: 190, col: 15, offset: 3710},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 190, col: 17, offset: 3712},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 19, offset: 3714},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderByClause",
			pos:  position{line: 193, col: 1, offset: 3770},
			expr: &actionExpr{
				pos: position{line: 194, col: 4, offset: 3787},
				run: (*parser).callonOrderByClause1,
				expr: &seqExpr{
					pos: position{line: 194, col: 4, offset: 3787},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 194, col: 4, offset: 3787},
							name: "OrderToken",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 2, offset: 3799},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 4, offset: 3801},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 2, offset: 3810},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 4, offset: 3812},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 6, offset: 3814},
								name: "OrderColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 2, offset: 3827},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 197, col: 5, offset: 3830},
								expr: &actionExpr{
									pos: position{line: 197, col: 7, offset: 3832},
									run: (*parser).callonOrderByClause11,
									expr: &seqExpr{
										pos: position{line: 197, col: 7, offset: 3832},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 197, col: 7, offset: 3832},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 9, offset: 3834},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 24, offset: 3849},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 26, offset: 3851},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 28, offset: 3853},
													name: "OrderColumn",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderColumn",
			pos:  position{line: 200, col: 1, offset: 3918},
			expr: &actionExpr{
				pos: position{line: 201, col: 4, offset: 3933},
				run: (*parser).callonOrderColumn1,
				expr: &seqExpr{
					pos: position{line: 201, col: 4, offset: 3933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 4, offset: 3933},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 6, offset: 3935},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 202, col: 2, offset: 3941},
							label: "s",
							expr: &zeroOrOneExpr{
								pos: position{line: 202, col: 4, offset: 3943},
								expr: &actionExpr{
									pos: position{line: 202, col: 6, offset: 3945},
									run: (*parser).callonOrderColumn7,
									expr: &seqExpr{
										pos: position{line: 202, col: 6, offset: 3945},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 202, col: 6, offset: 3945},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 202, col: 8, offset: 3947},
												label: "t",
												expr: &choiceExpr{
													pos: position{line: 202, col: 12, offset: 3951},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 202, col: 12, offset: 3951},
															name: "AscToken",
														},
														&ruleRefExpr{
															pos:  position{line: 202, col: 23, offset: 3962},
															name: "DescToken",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 2, offset: 3996},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 203, col: 4, offset: 3998},
								expr: &actionExpr{
									pos: position{line: 203, col: 6, offset: 4000},
									run: (*parser).callonOrderColumn16,
									expr: &seqExpr{
										pos: position{line: 203, col: 6, offset: 4000},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 203, col: 6, offset: 4000},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 203, col: 8, offset: 4002},
												name: "NullsToken",
											},
											&ruleRefExpr{
												pos:  position{line: 203, col: 19, offset: 4013},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 203, col: 21, offset: 4015},
												label: "l",
												expr: &choiceExpr{
													pos: position{line: 203, col: 25, offset: 4019},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 203, col: 25, offset: 4019},
															name: "LastToken",
														},
														&ruleRefExpr{
															pos:  position{line: 203, col: 37, offset: 4031},
															name: "FirstToken",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupByClause",
			pos:  position{line: 212, col: 1, offset: 4237},
			expr: &actionExpr{
				pos: position{line: 213, col: 4, offset: 4254},
				run: (*parser).callonGroupByClause1,
				expr: &seqExpr{
					pos: position{line: 213, col: 4, offset: 4254},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 213, col: 4, offset: 4254},
							name: "GroupToken",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 2, offset: 4266},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 4, offset: 4268},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 2, offset: 4277},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 4, offset: 4279},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 6, offset: 4281},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 216, col: 2, offset: 4287},
							label: "is",
							expr: &zeroOrMoreExpr{
								pos: position{line: 216, col: 5, offset: 4290},
								expr: &actionExpr{
									pos: position{line: 216, col: 7, offset: 4292},
									run: (*parser).callonGroupByClause11,
									expr: &seqExpr{
										pos: position{line: 216, col: 7, offset: 4292},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 216, col: 7, offset: 4292},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 216, col: 9, offset: 4294},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 216, col: 24, offset: 4309},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 216, col: 26, offset: 4311},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 216, col: 28, offset: 4313},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OffsetClause",
			pos:  position{line: 219, col: 1, offset: 4425},
			expr: &actionExpr{
				pos: position{line: 220, col: 4, offset: 4441},
				run: (*parser).callonOffsetClause1,
				expr: &seqExpr{
					pos: position{line: 220, col: 4, offset: 4441},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 220, col: 4, offset: 4441},
							name: "OffsetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 16, offset: 4453},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 18, offset: 4455},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 20, offset: 4457},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitClause",
			pos:  position{line: 223, col: 1, offset: 4536},
			expr: &actionExpr{
				pos: position{line: 224, col: 4, offset: 4551},
				run: (*parser).callonLimitClause1,
				expr: &seqExpr{
					pos: position{line: 224, col: 4, offset: 4551},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 224, col: 4, offset: 4551},
							name: "LimitToken",
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 15, offset: 4562},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 17, offset: 4564},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 19, offset: 4566},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "InsertWithColumnClause",
			pos:  position{line: 227, col: 1, offset: 4644},
			expr: &actionExpr{
				pos: position{line: 228, col: 4, offset: 4670},
				run: (*parser).callonInsertWithColumnClause1,
				expr: &seqExpr{
					pos: position{line: 228, col: 4, offset: 4670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 228, col: 4, offset: 4670},
							label: "cs",
							expr: &zeroOrOneExpr{
								pos: position{line: 228, col: 7, offset: 4673},
								expr: &actionExpr{
									pos: position{line: 228, col: 9, offset: 4675},
									run: (*parser).callonInsertWithColumnClause5,
									expr: &seqExpr{
										pos: position{line: 228, col: 9, offset: 4675},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 228, col: 9, offset: 4675},
												val:        "(",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 229, col: 4, offset: 4682},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 229, col: 6, offset: 4684},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 229, col: 8, offset: 4686},
													name: "Identifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 230, col: 4, offset: 4700},
												label: "fs",
												expr: &zeroOrMoreExpr{
													pos: position{line: 230, col: 7, offset: 4703},
													expr: &actionExpr{
														pos: position{line: 230, col: 9, offset: 4705},
														run: (*parser).callonInsertWithColumnClause13,
														expr: &seqExpr{
															pos: position{line: 230, col: 9, offset: 4705},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 230, col: 9, offset: 4705},
																	name: "_",
																},
																&ruleRefExpr{
																	pos:  position{line: 230, col: 11, offset: 4707},
																	name: "SeparatorToken",
																},
																&ruleRefExpr{
																	pos:  position{line: 230, col: 26, offset: 4722},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 230, col: 28, offset: 4724},
																	label: "x",
																	expr: &ruleRefExpr{
																		pos:  position{line: 230, col: 30, offset: 4726},
																		name: "Identifier",
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 231, col: 4, offset: 4761},
												name: "_",
											},
											&litMatcher{
												pos:        position{line: 231, col: 6, offset: 4763},
												val:        ")",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 4, offset: 4770},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 3, offset: 4810},
							name: "ValuesToken",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 2, offset: 4823},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 4, offset: 4825},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 6, offset: 4827},
								name: "InsertValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 236, col: 2, offset: 4840},
							label: "vs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 236, col: 5, offset: 4843},
								expr: &actionExpr{
									pos: position{line: 236, col: 7, offset: 4845},
									run: (*parser).callonInsertWithColumnClause29,
									expr: &seqExpr{
										pos: position{line: 236, col: 7, offset: 4845},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 236, col: 7, offset: 4845},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 236, col: 9, offset: 4847},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 236, col: 24, offset: 4862},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 236, col: 26, offset: 4864},
												label: "y",
												expr: &ruleRefExpr{
													pos:  position{line: 236, col: 28, offset: 4866},
													name: "InsertValue",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertWithDefaultClause",
			pos:  position{line: 244, col: 1, offset: 5001},
			expr: &actionExpr{
				pos: position{line: 245, col: 4, offset: 5028},
				run: (*parser).callonInsertWithDefaultClause1,
				expr: &seqExpr{
					pos: position{line: 245, col: 4, offset: 5028},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 245, col: 4, offset: 5028},
							name: "DefaultToken",
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 17, offset: 5041},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 19, offset: 5043},
							name: "ValuesToken",
						},
					},
				},
			},
		},
		{
			name: "PrimaryKeyClause",
			pos:  position{line: 248, col: 1, offset: 5106},
			expr: &actionExpr{
				pos: position{line: 249, col: 4, offset: 5126},
				run: (*parser).callonPrimaryKeyClause1,
				expr: &seqExpr{
					pos: position{line: 249, col: 4, offset: 5126},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 249, col: 4, offset: 5126},
							name: "PrimaryToken",
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 17, offset: 5139},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 19, offset: 5141},
							name: "KeyToken",
						},
					},
				},
			},
		},
		{
			name: "NotNullClause",
			pos:  position{line: 252, col: 1, offset: 5191},
			expr: &actionExpr{
				pos: position{line: 253, col: 4, offset: 5208},
				run: (*parser).callonNotNullClause1,
				expr: &seqExpr{
					pos: position{line: 253, col: 4, offset: 5208},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 253, col: 4, offset: 5208},
							name: "NotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 13, offset: 5217},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 15, offset: 5219},
							name: "NullToken",
						},
					},
				},
			},
		},
		{
			name: "UniqueClause",
			pos:  position{line: 256, col: 1, offset: 5270},
			expr: &actionExpr{
				pos: position{line: 257, col: 4, offset: 5286},
				run: (*parser).callonUniqueClause1,
				expr: &ruleRefExpr{
					pos:  position{line: 257, col: 4, offset: 5286},
					name: "UniqueToken",
				},
			},
		},
		{
			name: "DefaultClause",
			pos:  position{line: 260, col: 1, offset: 5338},
			expr: &actionExpr{
				pos: position{line: 261, col: 4, offset: 5355},
				run: (*parser).callonDefaultClause1,
				expr: &seqExpr{
					pos: position{line: 261, col: 4, offset: 5355},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 261, col: 4, offset: 5355},
							name: "DefaultToken",
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 17, offset: 5368},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 19, offset: 5370},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 21, offset: 5372},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "ForeignClause",
			pos:  position{line: 264, col: 1, offset: 5426},
			expr: &actionExpr{
				pos: position{line: 265, col: 4, offset: 5443},
				run: (*parser).callonForeignClause1,
				expr: &seqExpr{
					pos: position{line: 265, col: 4, offset: 5443},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 265, col: 4, offset: 5443},
							name: "ReferencesToken",
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 20, offset: 5459},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 22, offset: 5461},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 24, offset: 5463},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 35, offset: 5474},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 265, col: 37, offset: 5476},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 41, offset: 5480},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 43, offset: 5482},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 45, offset: 5484},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 56, offset: 5495},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 265, col: 58, offset: 5497},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AutoincrementClause",
			pos:  position{line: 273, col: 1, offset: 5613},
			expr: &actionExpr{
				pos: position{line: 274, col: 4, offset: 5636},
				run: (*parser).callonAutoincrementClause1,
				expr: &ruleRefExpr{
					pos:  position{line: 274, col: 4, offset: 5636},
					name: "AutoincrementToken",
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 278, col: 1, offset: 5720},
			expr: &ruleRefExpr{
				pos:  position{line: 279, col: 4, offset: 5728},
				name: "LogicExpr",
			},
		},
		{
			name: "ExprWithDefault",
			pos:  position{line: 281, col: 1, offset: 5739},
			expr: &choiceExpr{
				pos: position{line: 282, col: 4, offset: 5758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 282, col: 4, offset: 5758},
						run: (*parser).callonExprWithDefault2,
						expr: &seqExpr{
							pos: position{line: 282, col: 4, offset: 5758},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 282, col: 4, offset: 5758},
									expr: &ruleRefExpr{
										pos:  position{line: 282, col: 6, offset: 5760},
										name: "DefaultLiteral",
									},
								},
								&labeledExpr{
									pos:   position{line: 282, col: 22, offset: 5776},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 282, col: 24, offset: 5778},
										name: "DefaultLiteral",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 4, offset: 5814},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "LogicExpr",
			pos:  position{line: 285, col: 1, offset: 5820},
			expr: &ruleRefExpr{
				pos:  position{line: 286, col: 4, offset: 5833},
				name: "LogicExpr4",
			},
		},
		{
			name: "LogicExpr4",
			pos:  position{line: 288, col: 1, offset: 5845},
			expr: &actionExpr{
				pos: position{line: 289, col: 4, offset: 5859},
				run: (*parser).callonLogicExpr41,
				expr: &seqExpr{
					pos: position{line: 289, col: 4, offset: 5859},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 289, col: 4, offset: 5859},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 6, offset: 5861},
								name: "LogicExpr3",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 3, offset: 5874},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 290, col: 6, offset: 5877},
								expr: &actionExpr{
									pos: position{line: 290, col: 8, offset: 5879},
									run: (*parser).callonLogicExpr47,
									expr: &seqExpr{
										pos: position{line: 290, col: 8, offset: 5879},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 290, col: 8, offset: 5879},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 290, col: 10, offset: 5881},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 290, col: 13, offset: 5884},
													name: "OrOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 290, col: 24, offset: 5895},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 290, col: 26, offset: 5897},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 290, col: 28, offset: 5899},
													name: "LogicExpr3",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr3",
			pos:  position{line: 293, col: 1, offset: 5992},
			expr: &actionExpr{
				pos: position{line: 294, col: 4, offset: 6006},
				run: (*parser).callonLogicExpr31,
				expr: &seqExpr{
					pos: position{line: 294, col: 4, offset: 6006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 294, col: 4, offset: 6006},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 6, offset: 6008},
								name: "LogicExpr2",
							},
						},
						&labeledExpr{
							pos:   position{line: 295, col: 3, offset: 6021},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 295, col: 6, offset: 6024},
								expr: &actionExpr{
									pos: position{line: 295, col: 8, offset: 6026},
									run: (*parser).callonLogicExpr37,
									expr: &seqExpr{
										pos: position{line: 295, col: 8, offset: 6026},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 295, col: 8, offset: 6026},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 295, col: 10, offset: 6028},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 295, col: 13, offset: 6031},
													name: "AndOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 295, col: 25, offset: 6043},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 295, col: 27, offset: 6045},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 295, col: 29, offset: 6047},
													name: "LogicExpr2",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr2",
			pos:  position{line: 298, col: 1, offset: 6140},
			expr: &choiceExpr{
				pos: position{line: 299, col: 4, offset: 6154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 299, col: 4, offset: 6154},
						run: (*parser).callonLogicExpr22,
						expr: &seqExpr{
							pos: position{line: 299, col: 4, offset: 6154},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 299, col: 4, offset: 6154},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 7, offset: 6157},
										name: "NotOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 19, offset: 6169},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 299, col: 21, offset: 6171},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 23, offset: 6173},
										name: "LogicExpr2",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 301, col: 4, offset: 6223},
						name: "LogicExpr1",
					},
				},
			},
		},
		{
			name: "LogicExpr1",
			pos:  position{line: 303, col: 1, offset: 6235},
			expr: &actionExpr{
				pos: position{line: 304, col: 4, offset: 6249},
				run: (*parser).callonLogicExpr11,
				expr: &seqExpr{
					pos: position{line: 304, col: 4, offset: 6249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 304, col: 4, offset: 6249},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 6, offset: 6251},
								name: "ArithmeticExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 21, offset: 6266},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 304, col: 24, offset: 6269},
								expr: &actionExpr{
									pos: position{line: 304, col: 26, offset: 6271},
									run: (*parser).callonLogicExpr17,
									expr: &seqExpr{
										pos: position{line: 304, col: 26, offset: 6271},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 304, col: 26, offset: 6271},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 304, col: 28, offset: 6273},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 304, col: 30, offset: 6275},
													name: "LogicExpr1Op",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Op",
			pos:  position{line: 307, col: 1, offset: 6352},
			expr: &choiceExpr{
				pos: position{line: 308, col: 4, offset: 6368},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 308, col: 4, offset: 6368},
						name: "LogicExpr1In",
					},
					&ruleRefExpr{
						pos:  position{line: 309, col: 4, offset: 6384},
						name: "LogicExpr1Null",
					},
					&ruleRefExpr{
						pos:  position{line: 310, col: 4, offset: 6402},
						name: "LogicExpr1Like",
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 4, offset: 6420},
						name: "LogicExpr1Cmp",
					},
				},
			},
		},
		{
			name: "LogicExpr1In",
			pos:  position{line: 313, col: 1, offset: 6435},
			expr: &actionExpr{
				pos: position{line: 314, col: 4, offset: 6451},
				run: (*parser).callonLogicExpr1In1,
				expr: &seqExpr{
					pos: position{line: 314, col: 4, offset: 6451},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 314, col: 4, offset: 6451},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 6, offset: 6453},
								expr: &actionExpr{
									pos: position{line: 314, col: 8, offset: 6455},
									run: (*parser).callonLogicExpr1In5,
									expr: &seqExpr{
										pos: position{line: 314, col: 8, offset: 6455},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 314, col: 8, offset: 6455},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 314, col: 10, offset: 6457},
													name: "NotOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 314, col: 22, offset: 6469},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 45, offset: 6492},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 53, offset: 6500},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 314, col: 55, offset: 6502},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 59, offset: 6506},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 61, offset: 6508},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 63, offset: 6510},
								name: "MultiExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 73, offset: 6520},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 314, col: 75, offset: 6522},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Null",
			pos:  position{line: 323, col: 1, offset: 6644},
			expr: &actionExpr{
				pos: position{line: 324, col: 4, offset: 6662},
				run: (*parser).callonLogicExpr1Null1,
				expr: &seqExpr{
					pos: position{line: 324, col: 4, offset: 6662},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 324, col: 4, offset: 6662},
							name: "IsToken",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 12, offset: 6670},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 14, offset: 6672},
								expr: &actionExpr{
									pos: position{line: 324, col: 16, offset: 6674},
									run: (*parser).callonLogicExpr1Null6,
									expr: &seqExpr{
										pos: position{line: 324, col: 16, offset: 6674},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 324, col: 16, offset: 6674},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 18, offset: 6676},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 20, offset: 6678},
													name: "NotOperator",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 53, offset: 6711},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 55, offset: 6713},
							name: "NullToken",
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Like",
			pos:  position{line: 333, col: 1, offset: 6859},
			expr: &actionExpr{
				pos: position{line: 334, col: 4, offset: 6877},
				run: (*parser).callonLogicExpr1Like1,
				expr: &seqExpr{
					pos: position{line: 334, col: 4, offset: 6877},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 334, col: 4, offset: 6877},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 6, offset: 6879},
								expr: &actionExpr{
									pos: position{line: 334, col: 8, offset: 6881},
									run: (*parser).callonLogicExpr1Like5,
									expr: &seqExpr{
										pos: position{line: 334, col: 8, offset: 6881},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 334, col: 8, offset: 6881},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 334, col: 10, offset: 6883},
													name: "NotOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 334, col: 22, offset: 6895},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 334, col: 45, offset: 6918},
							name: "LikeToken",
						},
						&ruleRefExpr{
							pos:  position{line: 334, col: 55, offset: 6928},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 57, offset: 6930},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 59, offset: 6932},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Cmp",
			pos:  position{line: 343, col: 1, offset: 7057},
			expr: &actionExpr{
				pos: position{line: 344, col: 4, offset: 7074},
				run: (*parser).callonLogicExpr1Cmp1,
				expr: &seqExpr{
					pos: position{line: 344, col: 4, offset: 7074},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 344, col: 4, offset: 7074},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 7, offset: 7077},
								name: "CmpOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 19, offset: 7089},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 21, offset: 7091},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 23, offset: 7093},
								name: "ArithmeticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr",
			pos:  position{line: 347, col: 1, offset: 7145},
			expr: &ruleRefExpr{
				pos:  position{line: 348, col: 4, offset: 7163},
				name: "ArithmeticExpr3",
			},
		},
		{
			name: "ArithmeticExpr3",
			pos:  position{line: 350, col: 1, offset: 7180},
			expr: &actionExpr{
				pos: position{line: 351, col: 4, offset: 7199},
				run: (*parser).callonArithmeticExpr31,
				expr: &seqExpr{
					pos: position{line: 351, col: 4, offset: 7199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 351, col: 4, offset: 7199},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 6, offset: 7201},
								name: "ArithmeticExpr2",
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 22, offset: 7217},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 351, col: 25, offset: 7220},
								expr: &actionExpr{
									pos: position{line: 351, col: 27, offset: 7222},
									run: (*parser).callonArithmeticExpr37,
									expr: &seqExpr{
										pos: position{line: 351, col: 27, offset: 7222},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 351, col: 27, offset: 7222},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 351, col: 29, offset: 7224},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 351, col: 32, offset: 7227},
													name: "ConcatOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 351, col: 47, offset: 7242},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 351, col: 49, offset: 7244},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 351, col: 51, offset: 7246},
													name: "ArithmeticExpr2",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr2",
			pos:  position{line: 354, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 355, col: 4, offset: 7363},
				run: (*parser).callonArithmeticExpr21,
				expr: &seqExpr{
					pos: position{line: 355, col: 4, offset: 7363},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 355, col: 4, offset: 7363},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 6, offset: 7365},
								name: "ArithmeticExpr1",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 22, offset: 7381},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 355, col: 25, offset: 7384},
								expr: &actionExpr{
									pos: position{line: 355, col: 27, offset: 7386},
									run: (*parser).callonArithmeticExpr27,
									expr: &seqExpr{
										pos: position{line: 355, col: 27, offset: 7386},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 27, offset: 7386},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 29, offset: 7388},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 32, offset: 7391},
													name: "AddSubOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 355, col: 47, offset: 7406},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 49, offset: 7408},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 51, offset: 7410},
													name: "ArithmeticExpr1",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr1",
			pos:  position{line: 358, col: 1, offset: 7508},
			expr: &actionExpr{
				pos: position{line: 359, col: 4, offset: 7527},
				run: (*parser).callonArithmeticExpr11,
				expr: &seqExpr{
					pos: position{line: 359, col: 4, offset: 7527},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 359, col: 4, offset: 7527},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 6, offset: 7529},
								name: "Operand",
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 14, offset: 7537},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 359, col: 17, offset: 7540},
								expr: &actionExpr{
									pos: position{line: 359, col: 19, offset: 7542},
									run: (*parser).callonArithmeticExpr17,
									expr: &seqExpr{
										pos: position{line: 359, col: 19, offset: 7542},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 359, col: 19, offset: 7542},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 359, col: 21, offset: 7544},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 359, col: 24, offset: 7547},
													name: "MulDivModOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 359, col: 42, offset: 7565},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 359, col: 44, offset: 7567},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 359, col: 46, offset: 7569},
													name: "Operand",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiExpr",
			pos:  position{line: 362, col: 1, offset: 7659},
			expr: &actionExpr{
				pos: position{line: 363, col: 4, offset: 7672},
				run: (*parser).callonMultiExpr1,
				expr: &seqExpr{
					pos: position{line: 363, col: 4, offset: 7672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 4, offset: 7672},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 6, offset: 7674},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 363, col: 11, offset: 7679},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 363, col: 14, offset: 7682},
								expr: &actionExpr{
									pos: position{line: 363, col: 16, offset: 7684},
									run: (*parser).callonMultiExpr7,
									expr: &seqExpr{
										pos: position{line: 363, col: 16, offset: 7684},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 363, col: 16, offset: 7684},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 363, col: 18, offset: 7686},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 363, col: 33, offset: 7701},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 363, col: 35, offset: 7703},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 363, col: 37, offset: 7705},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiExprWithDefault",
			pos:  position{line: 366, col: 1, offset: 7763},
			expr: &actionExpr{
				pos: position{line: 367, col: 4, offset: 7787},
				run: (*parser).callonMultiExprWithDefault1,
				expr: &seqExpr{
					pos: position{line: 367, col: 4, offset: 7787},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 367, col: 4, offset: 7787},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 6, offset: 7789},
								name: "ExprWithDefault",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 22, offset: 7805},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 25, offset: 7808},
								expr: &actionExpr{
									pos: position{line: 367, col: 27, offset: 7810},
									run: (*parser).callonMultiExprWithDefault7,
									expr: &seqExpr{
										pos: position{line: 367, col: 27, offset: 7810},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 367, col: 27, offset: 7810},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 367, col: 29, offset: 7812},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 367, col: 44, offset: 7827},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 367, col: 46, offset: 7829},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 367, col: 48, offset: 7831},
													name: "ExprWithDefault",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operand",
			pos:  position{line: 370, col: 1, offset: 7900},
			expr: &choiceExpr{
				pos: position{line: 371, col: 4, offset: 7911},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 371, col: 4, offset: 7911},
						run: (*parser).callonOperand2,
						expr: &seqExpr{
							pos: position{line: 371, col: 4, offset: 7911},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 371, col: 4, offset: 7911},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 371, col: 7, offset: 7914},
										name: "UnaryOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 371, col: 21, offset: 7928},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 371, col: 23, offset: 7930},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 371, col: 25, offset: 7932},
										name: "Operand",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 4, offset: 7978},
						run: (*parser).callonOperand9,
						expr: &seqExpr{
							pos: position{line: 372, col: 4, offset: 7978},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 372, col: 4, offset: 7978},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 372, col: 8, offset: 7982},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 372, col: 10, offset: 7984},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 372, col: 12, offset: 7986},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 372, col: 17, offset: 7991},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 372, col: 19, offset: 7993},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 373, col: 4, offset: 8018},
						run: (*parser).callonOperand17,
						expr: &seqExpr{
							pos: position{line: 373, col: 4, offset: 8018},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 373, col: 4, offset: 8018},
									expr: &ruleRefExpr{
										pos:  position{line: 373, col: 6, offset: 8020},
										name: "CastToken",
									},
								},
								&labeledExpr{
									pos:   position{line: 373, col: 17, offset: 8031},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 373, col: 19, offset: 8033},
										name: "TypeCast",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 4, offset: 8063},
						name: "FunctionCall",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 4, offset: 8079},
						name: "Value",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 4, offset: 8088},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "TypeCast",
			pos:  position{line: 378, col: 1, offset: 8100},
			expr: &actionExpr{
				pos: position{line: 379, col: 4, offset: 8112},
				run: (*parser).callonTypeCast1,
				expr: &seqExpr{
					pos: position{line: 379, col: 4, offset: 8112},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 379, col: 4, offset: 8112},
							name: "CastToken",
						},
						&ruleRefExpr{
							pos:  position{line: 379, col: 14, offset: 8122},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 379, col: 16, offset: 8124},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 379, col: 20, offset: 8128},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 22, offset: 8130},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 24, offset: 8132},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 379, col: 29, offset: 8137},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 379, col: 31, offset: 8139},
							name: "AsToken",
						},
						&ruleRefExpr{
							pos:  position{line: 379, col: 39, offset: 8147},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 41, offset: 8149},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 43, offset: 8151},
								name: "DataType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 379, col: 52, offset: 8160},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 379, col: 54, offset: 8162},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 382, col: 1, offset: 8240},
			expr: &actionExpr{
				pos: position{line: 383, col: 4, offset: 8256},
				run: (*parser).callonFunctionCall1,
				expr: &seqExpr{
					pos: position{line: 383, col: 4, offset: 8256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 383, col: 4, offset: 8256},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 6, offset: 8258},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 17, offset: 8269},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 383, col: 19, offset: 8271},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 23, offset: 8275},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 25, offset: 8277},
							label: "r",
							expr: &zeroOrOneExpr{
								pos: position{line: 383, col: 27, offset: 8279},
								expr: &ruleRefExpr{
									pos:  position{line: 383, col: 27, offset: 8279},
									name: "FunctionArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 41, offset: 8293},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 383, col: 43, offset: 8295},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 386, col: 1, offset: 8377},
			expr: &choiceExpr{
				pos: position{line: 387, col: 4, offset: 8393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 387, col: 4, offset: 8393},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 387, col: 4, offset: 8393},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 6, offset: 8395},
								name: "AnyLiteral",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 4, offset: 8442},
						name: "MultiExpr",
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 390, col: 1, offset: 8453},
			expr: &actionExpr{
				pos: position{line: 391, col: 4, offset: 8467},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 391, col: 4, offset: 8467},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 391, col: 4, offset: 8467},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 6, offset: 8469},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 17, offset: 8480},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 391, col: 19, offset: 8482},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 23, offset: 8486},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 25, offset: 8488},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 27, offset: 8490},
								name: "ExprWithDefault",
							},
						},
					},
				},
			},
		},
		{
			name: "UnaryOperator",
			pos:  position{line: 395, col: 1, offset: 8598},
			expr: &ruleRefExpr{
				pos:  position{line: 396, col: 4, offset: 8615},
				name: "SignOperator",
			},
		},
		{
			name: "SignOperator",
			pos:  position{line: 398, col: 1, offset: 8629},
			expr: &actionExpr{
				pos: position{line: 399, col: 4, offset: 8645},
				run: (*parser).callonSignOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 399, col: 4, offset: 8645},
					name: "Sign",
				},
			},
		},
		{
			name: "NotOperator",
			pos:  position{line: 410, col: 1, offset: 8826},
			expr: &actionExpr{
				pos: position{line: 411, col: 4, offset: 8841},
				run: (*parser).callonNotOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 411, col: 4, offset: 8841},
					name: "NotToken",
				},
			},
		},
		{
			name: "AndOperator",
			pos:  position{line: 414, col: 1, offset: 8890},
			expr: &actionExpr{
				pos: position{line: 415, col: 4, offset: 8905},
				run: (*parser).callonAndOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 415, col: 4, offset: 8905},
					name: "AndToken",
				},
			},
		},
		{
			name: "OrOperator",
			pos:  position{line: 418, col: 1, offset: 8954},
			expr: &actionExpr{
				pos: position{line: 419, col: 4, offset: 8968},
				run: (*parser).callonOrOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 419, col: 4, offset: 8968},
					name: "OrToken",
				},
			},
		},
		{
			name: "CmpOperator",
			pos:  position{line: 422, col: 1, offset: 9015},
			expr: &actionExpr{
				pos: position{line: 423, col: 4, offset: 9030},
				run: (*parser).callonCmpOperator1,
				expr: &choiceExpr{
					pos: position{line: 423, col: 6, offset: 9032},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 423, col: 6, offset: 9032},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 423, col: 13, offset: 9039},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 423, col: 20, offset: 9046},
							val:        "<>",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 423, col: 27, offset: 9053},
							val:        "!=",
							ignoreCase: false,
						},
						&charClassMatcher{
							pos:        position{line: 423, col: 34, offset: 9060},
							val:        "[<>=]",
							chars:      []rune{'<', '>', '='},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ConcatOperator",
			pos:  position{line: 444, col: 1, offset: 9539},
			expr: &actionExpr{
				pos: position{line: 445, col: 4, offset: 9557},
				run: (*parser).callonConcatOperator1,
				expr: &litMatcher{
					pos:        position{line: 445, col: 4, offset: 9557},
					val:        "||",
					ignoreCase: false,
				},
			},
		},
		{
			name: "AddSubOperator",
			pos:  position{line: 448, col: 1, offset: 9605},
			expr: &actionExpr{
				pos: position{line: 449, col: 4, offset: 9623},
				run: (*parser).callonAddSubOperator1,
				expr: &charClassMatcher{
					pos:        position{line: 449, col: 4, offset: 9623},
					val:        "[+-]",
					chars:      []rune{'+', '-'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "MulDivModOperator",
			pos:  position{line: 460, col: 1, offset: 9832},
			expr: &actionExpr{
				pos: position{line: 461, col: 4, offset: 9853},
				run: (*parser).callonMulDivModOperator1,
				expr: &charClassMatcher{
					pos:        position{line: 461, col: 4, offset: 9853},
					val:        "[*/%]",
					chars:      []rune{'*', '/', '%'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "DataType",
			pos:  position{line: 475, col: 1, offset: 10133},
			expr: &choiceExpr{
				pos: position{line: 476, col: 4, offset: 10145},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 476, col: 4, offset: 10145},
						name: "UIntType",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 4, offset: 10157},
						name: "IntType",
					},
					&ruleRefExpr{
						pos:  position{line: 478, col: 4, offset: 10168},
						name: "UFixedType",
					},
					&ruleRefExpr{
						pos:  position{line: 479, col: 4, offset: 10182},
						name: "FixedType",
					},
					&ruleRefExpr{
						pos:  position{line: 480, col: 4, offset: 10195},
						name: "FixedBytesType",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 4, offset: 10213},
						name: "DynamicBytesType",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 4, offset: 10233},
						name: "BoolType",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 4, offset: 10245},
						name: "AddressType",
					},
				},
			},
		},
		{
			name: "UIntType",
			pos:  position{line: 485, col: 1, offset: 10258},
			expr: &actionExpr{
				pos: position{line: 486, col: 4, offset: 10270},
				run: (*parser).callonUIntType1,
				expr: &seqExpr{
					pos: position{line: 486, col: 4, offset: 10270},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 4, offset: 10270},
							val:        "uint",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 486, col: 12, offset: 10278},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 14, offset: 10280},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 36, offset: 10302},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 37, offset: 10303},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IntType",
			pos:  position{line: 505, col: 1, offset: 10741},
			expr: &actionExpr{
				pos: position{line: 506, col: 4, offset: 10752},
				run: (*parser).callonIntType1,
				expr: &seqExpr{
					pos: position{line: 506, col: 4, offset: 10752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 506, col: 4, offset: 10752},
							val:        "int",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 506, col: 11, offset: 10759},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 13, offset: 10761},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 506, col: 35, offset: 10783},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 36, offset: 10784},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "UFixedType",
			pos:  position{line: 525, col: 1, offset: 11222},
			expr: &actionExpr{
				pos: position{line: 526, col: 4, offset: 11236},
				run: (*parser).callonUFixedType1,
				expr: &seqExpr{
					pos: position{line: 526, col: 4, offset: 11236},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 526, col: 4, offset: 11236},
							val:        "ufixed",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 526, col: 14, offset: 11246},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 16, offset: 11248},
								name: "NonZeroLeadingInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 526, col: 38, offset: 11270},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 526, col: 43, offset: 11275},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 45, offset: 11277},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 526, col: 67, offset: 11299},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 68, offset: 11300},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FixedType",
			pos:  position{line: 558, col: 1, offset: 12133},
			expr: &actionExpr{
				pos: position{line: 559, col: 4, offset: 12146},
				run: (*parser).callonFixedType1,
				expr: &seqExpr{
					pos: position{line: 559, col: 4, offset: 12146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 4, offset: 12146},
							val:        "fixed",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 559, col: 13, offset: 12155},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 15, offset: 12157},
								name: "NonZeroLeadingInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 559, col: 37, offset: 12179},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 559, col: 42, offset: 12184},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 44, offset: 12186},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 559, col: 66, offset: 12208},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 67, offset: 12209},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FixedBytesType",
			pos:  position{line: 591, col: 1, offset: 13041},
			expr: &choiceExpr{
				pos: position{line: 592, col: 4, offset: 13059},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 592, col: 4, offset: 13059},
						run: (*parser).callonFixedBytesType2,
						expr: &seqExpr{
							pos: position{line: 592, col: 4, offset: 13059},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 592, col: 4, offset: 13059},
									val:        "bytes",
									ignoreCase: true,
								},
								&labeledExpr{
									pos:   position{line: 592, col: 13, offset: 13068},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 592, col: 15, offset: 13070},
										name: "NonZeroLeadingInteger",
									},
								},
								&notExpr{
									pos: position{line: 592, col: 37, offset: 13092},
									expr: &ruleRefExpr{
										pos:  position{line: 592, col: 38, offset: 13093},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 610, col: 4, offset: 13532},
						run: (*parser).callonFixedBytesType9,
						expr: &seqExpr{
							pos: position{line: 610, col: 4, offset: 13532},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 610, col: 4, offset: 13532},
									val:        "byte",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 610, col: 12, offset: 13540},
									expr: &ruleRefExpr{
										pos:  position{line: 610, col: 13, offset: 13541},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DynamicBytesType",
			pos:  position{line: 615, col: 1, offset: 13612},
			expr: &actionExpr{
				pos: position{line: 616, col: 4, offset: 13632},
				run: (*parser).callonDynamicBytesType1,
				expr: &choiceExpr{
					pos: position{line: 616, col: 6, offset: 13634},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 616, col: 6, offset: 13634},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 616, col: 6, offset: 13634},
									val:        "bytes",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 616, col: 15, offset: 13643},
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 16, offset: 13644},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 617, col: 5, offset: 13669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 617, col: 5, offset: 13669},
									val:        "string",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 617, col: 15, offset: 13679},
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 16, offset: 13680},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 618, col: 5, offset: 13705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 618, col: 5, offset: 13705},
									val:        "text",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 618, col: 13, offset: 13713},
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 14, offset: 13714},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AddressType",
			pos:  position{line: 622, col: 1, offset: 13782},
			expr: &actionExpr{
				pos: position{line: 623, col: 4, offset: 13797},
				run: (*parser).callonAddressType1,
				expr: &seqExpr{
					pos: position{line: 623, col: 4, offset: 13797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 623, col: 4, offset: 13797},
							val:        "address",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 623, col: 15, offset: 13808},
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 16, offset: 13809},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolType",
			pos:  position{line: 626, col: 1, offset: 13869},
			expr: &actionExpr{
				pos: position{line: 627, col: 4, offset: 13881},
				run: (*parser).callonBoolType1,
				expr: &choiceExpr{
					pos: position{line: 627, col: 6, offset: 13883},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 627, col: 6, offset: 13883},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 627, col: 6, offset: 13883},
									val:        "bool",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 627, col: 14, offset: 13891},
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 15, offset: 13892},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 628, col: 5, offset: 13917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 628, col: 5, offset: 13917},
									val:        "boolean",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 628, col: 16, offset: 13928},
									expr: &ruleRefExpr{
										pos:  position{line: 628, col: 17, offset: 13929},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 633, col: 1, offset: 14002},
			expr: &choiceExpr{
				pos: position{line: 634, col: 4, offset: 14011},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 634, col: 4, offset: 14011},
						name: "NumberLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 635, col: 4, offset: 14028},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 636, col: 4, offset: 14045},
						name: "BoolLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 637, col: 4, offset: 14060},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "AnyLiteral",
			pos:  position{line: 639, col: 1, offset: 14073},
			expr: &actionExpr{
				pos: position{line: 640, col: 4, offset: 14087},
				run: (*parser).callonAnyLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 640, col: 4, offset: 14087},
					name: "AnyToken",
				},
			},
		},
		{
			name: "DefaultLiteral",
			pos:  position{line: 643, col: 1, offset: 14132},
			expr: &actionExpr{
				pos: position{line: 644, col: 4, offset: 14150},
				run: (*parser).callonDefaultLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 644, col: 4, offset: 14150},
					name: "DefaultToken",
				},
			},
		},
		{
			name: "BoolLiteral",
			pos:  position{line: 647, col: 1, offset: 14203},
			expr: &actionExpr{
				pos: position{line: 648, col: 4, offset: 14218},
				run: (*parser).callonBoolLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 648, col: 4, offset: 14218},
					label: "b",
					expr: &choiceExpr{
						pos: position{line: 648, col: 8, offset: 14222},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 648, col: 8, offset: 14222},
								name: "TrueToken",
							},
							&ruleRefExpr{
								pos:  position{line: 648, col: 20, offset: 14234},
								name: "FalseToken",
							},
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 651, col: 1, offset: 14315},
			expr: &actionExpr{
				pos: position{line: 652, col: 4, offset: 14330},
				run: (*parser).callonNullLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 652, col: 4, offset: 14330},
					name: "NullToken",
				},
			},
		},
		{
			name: "NumberLiteral",
			pos:  position{line: 655, col: 1, offset: 14377},
			expr: &choiceExpr{
				pos: position{line: 656, col: 4, offset: 14394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 656, col: 4, offset: 14394},
						run: (*parser).callonNumberLiteral2,
						expr: &seqExpr{
							pos: position{line: 656, col: 4, offset: 14394},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 656, col: 4, offset: 14394},
									expr: &seqExpr{
										pos: position{line: 656, col: 6, offset: 14396},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 656, col: 6, offset: 14396},
												val:        "0",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 656, col: 10, offset: 14400},
												val:        "x",
												ignoreCase: true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 656, col: 16, offset: 14406},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 656, col: 18, offset: 14408},
										name: "Hex",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 657, col: 4, offset: 14433},
						name: "Decimal",
					},
				},
			},
		},
		{
			name: "Sign",
			pos:  position{line: 659, col: 1, offset: 14442},
			expr: &charClassMatcher{
				pos:        position{line: 660, col: 4, offset: 14450},
				val:        "[-+]",
				chars:      []rune{'-', '+'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Integer",
			pos:  position{line: 662, col: 1, offset: 14456},
			expr: &actionExpr{
				pos: position{line: 663, col: 4, offset: 14467},
				run: (*parser).callonInteger1,
				expr: &oneOrMoreExpr{
					pos: position{line: 663, col: 4, offset: 14467},
					expr: &charClassMatcher{
						pos:        position{line: 663, col: 4, offset: 14467},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "NonZeroLeadingInteger",
			pos:  position{line: 682, col: 1, offset: 14910},
			expr: &actionExpr{
				pos: position{line: 683, col: 4, offset: 14935},
				run: (*parser).callonNonZeroLeadingInteger1,
				expr: &choiceExpr{
					pos: position{line: 683, col: 6, offset: 14937},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 683, col: 6, offset: 14937},
							val:        "0",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 683, col: 12, offset: 14943},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 683, col: 12, offset: 14943},
									val:        "[1-9]",
									ranges:     []rune{'1', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 683, col: 17, offset: 14948},
									expr: &charClassMatcher{
										pos:        position{line: 683, col: 17, offset: 14948},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Fixnum",
			pos:  position{line: 686, col: 1, offset: 14981},
			expr: &choiceExpr{
				pos: position{line: 687, col: 4, offset: 14991},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 687, col: 4, offset: 14991},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 687, col: 4, offset: 14991},
								name: "Integer",
							},
							&litMatcher{
								pos:        position{line: 687, col: 12, offset: 14999},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 687, col: 16, offset: 15003},
								name: "Integer",
							},
						},
					},
					&seqExpr{
						pos: position{line: 688, col: 4, offset: 15014},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 688, col: 4, offset: 15014},
								name: "Integer",
							},
							&zeroOrOneExpr{
								pos: position{line: 688, col: 12, offset: 15022},
								expr: &litMatcher{
									pos:        position{line: 688, col: 12, offset: 15022},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 689, col: 4, offset: 15030},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 689, col: 4, offset: 15030},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 689, col: 8, offset: 15034},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 691, col: 1, offset: 15043},
			expr: &actionExpr{
				pos: position{line: 692, col: 4, offset: 15054},
				run: (*parser).callonDecimal1,
				expr: &seqExpr{
					pos: position{line: 692, col: 4, offset: 15054},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 692, col: 4, offset: 15054},
							name: "Fixnum",
						},
						&zeroOrOneExpr{
							pos: position{line: 692, col: 11, offset: 15061},
							expr: &seqExpr{
								pos: position{line: 692, col: 13, offset: 15063},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 692, col: 13, offset: 15063},
										val:        "e",
										ignoreCase: true,
									},
									&zeroOrOneExpr{
										pos: position{line: 692, col: 18, offset: 15068},
										expr: &ruleRefExpr{
											pos:  position{line: 692, col: 18, offset: 15068},
											name: "Sign",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 24, offset: 15074},
										name: "Integer",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 711, col: 1, offset: 15503},
			expr: &actionExpr{
				pos: position{line: 712, col: 4, offset: 15510},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 712, col: 4, offset: 15510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 712, col: 4, offset: 15510},
							val:        "0",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 712, col: 8, offset: 15514},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 712, col: 13, offset: 15519},
							label: "s",
							expr: &oneOrMoreExpr{
								pos: position{line: 712, col: 15, offset: 15521},
								expr: &charClassMatcher{
									pos:        position{line: 712, col: 17, offset: 15523},
									val:        "[0-9A-Fa-f]",
									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&notExpr{
							pos: position{line: 712, col: 32, offset: 15538},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 33, offset: 15539},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 715, col: 1, offset: 15604},
			expr: &choiceExpr{
				pos: position{line: 716, col: 4, offset: 15621},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 716, col: 4, offset: 15621},
						name: "HexString",
					},
					&ruleRefExpr{
						pos:  position{line: 717, col: 4, offset: 15634},
						name: "NormalString",
					},
				},
			},
		},
		{
			name: "HexString",
			pos:  position{line: 719, col: 1, offset: 15648},
			expr: &actionExpr{
				pos: position{line: 720, col: 4, offset: 15661},
				run: (*parser).callonHexString1,
				expr: &seqExpr{
					pos: position{line: 720, col: 4, offset: 15661},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 720, col: 6, offset: 15663},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 6, offset: 15663},
									val:        "hex",
									ignoreCase: true,
								},
								&litMatcher{
									pos:        position{line: 720, col: 15, offset: 15672},
									val:        "x",
									ignoreCase: true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 720, col: 22, offset: 15679},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 720, col: 26, offset: 15683},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 28, offset: 15685},
								expr: &actionExpr{
									pos: position{line: 720, col: 29, offset: 15686},
									run: (*parser).callonHexString9,
									expr: &seqExpr{
										pos: position{line: 720, col: 29, offset: 15686},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 720, col: 29, offset: 15686},
												val:        "[0-9a-fA-F]",
												ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 720, col: 40, offset: 15697},
												val:        "[0-9a-fA-F]",
												ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 720, col: 78, offset: 15735},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NormalString",
			pos:  position{line: 723, col: 1, offset: 15804},
			expr: &actionExpr{
				pos: position{line: 724, col: 4, offset: 15820},
				run: (*parser).callonNormalString1,
				expr: &seqExpr{
					pos: position{line: 724, col: 4, offset: 15820},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 724, col: 4, offset: 15820},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 724, col: 8, offset: 15824},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 724, col: 10, offset: 15826},
								expr: &actionExpr{
									pos: position{line: 724, col: 12, offset: 15828},
									run: (*parser).callonNormalString6,
									expr: &choiceExpr{
										pos: position{line: 724, col: 14, offset: 15830},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 724, col: 14, offset: 15830},
												val:        "[^'\\r\\n\\\\]",
												chars:      []rune{'\'', '\r', '\n', '\\'},
												ignoreCase: false,
												inverted:   true,
											},
											&seqExpr{
												pos: position{line: 724, col: 27, offset: 15843},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 724, col: 27, offset: 15843},
														val:        "\\",
														ignoreCase: false,
													},
													&anyMatcher{
														line: 724, col: 32, offset: 15848,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 724, col: 62, offset: 15878},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectToken",
			pos:  position{line: 747, col: 1, offset: 16367},
			expr: &seqExpr{
				pos: position{line: 748, col: 4, offset: 16382},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 748, col: 4, offset: 16382},
						val:        "select",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 748, col: 14, offset: 16392},
						expr: &ruleRefExpr{
							pos:  position{line: 748, col: 15, offset: 16393},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "FromToken",
			pos:  position{line: 750, col: 1, offset: 16415},
			expr: &seqExpr{
				pos: position{line: 751, col: 4, offset: 16428},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 751, col: 4, offset: 16428},
						val:        "from",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 751, col: 12, offset: 16436},
						expr: &ruleRefExpr{
							pos:  position{line: 751, col: 13, offset: 16437},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "WhereToken",
			pos:  position{line: 753, col: 1, offset: 16459},
			expr: &seqExpr{
				pos: position{line: 754, col: 4, offset: 16473},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 754, col: 4, offset: 16473},
						val:        "where",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 754, col: 13, offset: 16482},
						expr: &ruleRefExpr{
							pos:  position{line: 754, col: 14, offset: 16483},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OrderToken",
			pos:  position{line: 756, col: 1, offset: 16505},
			expr: &seqExpr{
				pos: position{line: 757, col: 4, offset: 16519},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 757, col: 4, offset: 16519},
						val:        "order",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 757, col: 13, offset: 16528},
						expr: &ruleRefExpr{
							pos:  position{line: 757, col: 14, offset: 16529},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 759, col: 1, offset: 16551},
			expr: &seqExpr{
				pos: position{line: 760, col: 4, offset: 16562},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 760, col: 4, offset: 16562},
						val:        "by",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 760, col: 10, offset: 16568},
						expr: &ruleRefExpr{
							pos:  position{line: 760, col: 11, offset: 16569},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "GroupToken",
			pos:  position{line: 762, col: 1, offset: 16591},
			expr: &seqExpr{
				pos: position{line: 763, col: 4, offset: 16605},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 763, col: 4, offset: 16605},
						val:        "group",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 763, col: 13, offset: 16614},
						expr: &ruleRefExpr{
							pos:  position{line: 763, col: 14, offset: 16615},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "LimitToken",
			pos:  position{line: 765, col: 1, offset: 16637},
			expr: &seqExpr{
				pos: position{line: 766, col: 4, offset: 16651},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 766, col: 4, offset: 16651},
						val:        "limit",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 766, col: 13, offset: 16660},
						expr: &ruleRefExpr{
							pos:  position{line: 766, col: 14, offset: 16661},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OffsetToken",
			pos:  position{line: 768, col: 1, offset: 16683},
			expr: &seqExpr{
				pos: position{line: 769, col: 4, offset: 16698},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 769, col: 4, offset: 16698},
						val:        "offset",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 769, col: 14, offset: 16708},
						expr: &ruleRefExpr{
							pos:  position{line: 769, col: 15, offset: 16709},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "UpdateToken",
			pos:  position{line: 771, col: 1, offset: 16731},
			expr: &seqExpr{
				pos: position{line: 772, col: 4, offset: 16746},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 772, col: 4, offset: 16746},
						val:        "update",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 772, col: 14, offset: 16756},
						expr: &ruleRefExpr{
							pos:  position{line: 772, col: 15, offset: 16757},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "SetToken",
			pos:  position{line: 774, col: 1, offset: 16779},
			expr: &seqExpr{
				pos: position{line: 775, col: 4, offset: 16791},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 775, col: 4, offset: 16791},
						val:        "set",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 775, col: 11, offset: 16798},
						expr: &ruleRefExpr{
							pos:  position{line: 775, col: 12, offset: 16799},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "DeleteToken",
			pos:  position{line: 777, col: 1, offset: 16821},
			expr: &seqExpr{
				pos: position{line: 778, col: 4, offset: 16836},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 778, col: 4, offset: 16836},
						val:        "delete",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 778, col: 14, offset: 16846},
						expr: &ruleRefExpr{
							pos:  position{line: 778, col: 15, offset: 16847},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "InsertToken",
			pos:  position{line: 780, col: 1, offset: 16869},
			expr: &seqExpr{
				pos: position{line: 781, col: 4, offset: 16884},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 781, col: 4, offset: 16884},
						val:        "insert",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 781, col: 14, offset: 16894},
						expr: &ruleRefExpr{
							pos:  position{line: 781, col: 15, offset: 16895},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "IntoToken",
			pos:  position{line: 783, col: 1, offset: 16917},
			expr: &seqExpr{
				pos: position{line: 784, col: 4, offset: 16930},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 784, col: 4, offset: 16930},
						val:        "into",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 784, col: 12, offset: 16938},
						expr: &ruleRefExpr{
							pos:  position{line: 784, col: 13, offset: 16939},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "ValuesToken",
			pos:  position{line: 786, col: 1, offset: 16961},
			expr: &seqExpr{
				pos: position{line: 787, col: 4, offset: 16976},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 787, col: 4, offset: 16976},
						val:        "values",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 787, col: 14, offset: 16986},
						expr: &ruleRefExpr{
							pos:  position{line: 787, col: 15, offset: 16987},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "CreateToken",
			pos:  position{line: 789, col: 1, offset: 17009},
			expr: &seqExpr{
				pos: position{line: 790, col: 4, offset: 17024},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 790, col: 4, offset: 17024},
						val:        "create",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 790, col: 14, offset: 17034},
						expr: &ruleRefExpr{
							pos:  position{line: 790, col: 15, offset: 17035},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "TableToken",
			pos:  position{line: 792, col: 1, offset: 17057},
			expr: &seqExpr{
				pos: position{line: 793, col: 4, offset: 17071},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 793, col: 4, offset: 17071},
						val:        "table",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 793, col: 13, offset: 17080},
						expr: &ruleRefExpr{
							pos:  position{line: 793, col: 14, offset: 17081},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "IndexToken",
			pos:  position{line: 795, col: 1, offset: 17103},
			expr: &seqExpr{
				pos: position{line: 796, col: 4, offset: 17117},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 796, col: 4, offset: 17117},
						val:        "index",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 796, col: 13, offset: 17126},
						expr: &ruleRefExpr{
							pos:  position{line: 796, col: 14, offset: 17127},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "UniqueToken",
			pos:  position{line: 798, col: 1, offset: 17149},
			expr: &seqExpr{
				pos: position{line: 799, col: 4, offset: 17164},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 799, col: 4, offset: 17164},
						val:        "unique",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 799, col: 14, offset: 17174},
						expr: &ruleRefExpr{
							pos:  position{line: 799, col: 15, offset: 17175},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 801, col: 1, offset: 17197},
			expr: &seqExpr{
				pos: position{line: 802, col: 4, offset: 17213},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 802, col: 4, offset: 17213},
						val:        "default",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 802, col: 15, offset: 17224},
						expr: &ruleRefExpr{
							pos:  position{line: 802, col: 16, offset: 17225},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "PrimaryToken",
			pos:  position{line: 804, col: 1, offset: 17247},
			expr: &seqExpr{
				pos: position{line: 805, col: 4, offset: 17263},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 805, col: 4, offset: 17263},
						val:        "primary",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 805, col: 15, offset: 17274},
						expr: &ruleRefExpr{
							pos:  position{line: 805, col: 16, offset: 17275},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "KeyToken",
			pos:  position{line: 807, col: 1, offset: 17297},
			expr: &seqExpr{
				pos: position{line: 808, col: 4, offset: 17309},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 808, col: 4, offset: 17309},
						val:        "key",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 808, col: 11, offset: 17316},
						expr: &ruleRefExpr{
							pos:  position{line: 808, col: 12, offset: 17317},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "ReferencesToken",
			pos:  position{line: 810, col: 1, offset: 17339},
			expr: &seqExpr{
				pos: position{line: 811, col: 4, offset: 17358},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 811, col: 4, offset: 17358},
						val:        "references",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 811, col: 18, offset: 17372},
						expr: &ruleRefExpr{
							pos:  position{line: 811, col: 19, offset: 17373},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "AutoincrementToken",
			pos:  position{line: 813, col: 1, offset: 17395},
			expr: &seqExpr{
				pos: position{line: 814, col: 4, offset: 17417},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 814, col: 4, offset: 17417},
						val:        "autoincrement",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 814, col: 21, offset: 17434},
						expr: &ruleRefExpr{
							pos:  position{line: 814, col: 22, offset: 17435},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OnToken",
			pos:  position{line: 816, col: 1, offset: 17457},
			expr: &seqExpr{
				pos: position{line: 817, col: 4, offset: 17468},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 817, col: 4, offset: 17468},
						val:        "on",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 817, col: 10, offset: 17474},
						expr: &ruleRefExpr{
							pos:  position{line: 817, col: 11, offset: 17475},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "TrueToken",
			pos:  position{line: 819, col: 1, offset: 17497},
			expr: &actionExpr{
				pos: position{line: 820, col: 4, offset: 17510},
				run: (*parser).callonTrueToken1,
				expr: &seqExpr{
					pos: position{line: 820, col: 4, offset: 17510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 820, col: 4, offset: 17510},
							val:        "true",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 820, col: 12, offset: 17518},
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 13, offset: 17519},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FalseToken",
			pos:  position{line: 823, col: 1, offset: 17573},
			expr: &actionExpr{
				pos: position{line: 824, col: 4, offset: 17587},
				run: (*parser).callonFalseToken1,
				expr: &seqExpr{
					pos: position{line: 824, col: 4, offset: 17587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 824, col: 4, offset: 17587},
							val:        "false",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 824, col: 13, offset: 17596},
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 14, offset: 17597},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NullToken",
			pos:  position{line: 827, col: 1, offset: 17651},
			expr: &seqExpr{
				pos: position{line: 828, col: 4, offset: 17664},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 828, col: 4, offset: 17664},
						val:        "null",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 828, col: 12, offset: 17672},
						expr: &ruleRefExpr{
							pos:  position{line: 828, col: 13, offset: 17673},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "IsToken",
			pos:  position{line: 830, col: 1, offset: 17695},
			expr: &seqExpr{
				pos: position{line: 831, col: 4, offset: 17706},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 831, col: 4, offset: 17706},
						val:        "is",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 831, col: 10, offset: 17712},
						expr: &ruleRefExpr{
							pos:  position{line: 831, col: 11, offset: 17713},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "NullsToken",
			pos:  position{line: 833, col: 1, offset: 17735},
			expr: &seqExpr{
				pos: position{line: 834, col: 4, offset: 17749},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 834, col: 4, offset: 17749},
						val:        "nulls",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 834, col: 13, offset: 17758},
						expr: &ruleRefExpr{
							pos:  position{line: 834, col: 14, offset: 17759},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "LastToken",
			pos:  position{line: 836, col: 1, offset: 17781},
			expr: &actionExpr{
				pos: position{line: 837, col: 4, offset: 17794},
				run: (*parser).callonLastToken1,
				expr: &seqExpr{
					pos: position{line: 837, col: 4, offset: 17794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 837, col: 4, offset: 17794},
							val:        "last",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 837, col: 12, offset: 17802},
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 13, offset: 17803},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FirstToken",
			pos:  position{line: 840, col: 1, offset: 17857},
			expr: &actionExpr{
				pos: position{line: 841, col: 4, offset: 17871},
				run: (*parser).callonFirstToken1,
				expr: &seqExpr{
					pos: position{line: 841, col: 4, offset: 17871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 841, col: 4, offset: 17871},
							val:        "first",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 841, col: 13, offset: 17880},
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 14, offset: 17881},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 844, col: 1, offset: 17935},
			expr: &seqExpr{
				pos: position{line: 845, col: 4, offset: 17947},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 845, col: 4, offset: 17947},
						val:        "and",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 845, col: 11, offset: 17954},
						expr: &ruleRefExpr{
							pos:  position{line: 845, col: 12, offset: 17955},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 847, col: 1, offset: 17977},
			expr: &seqExpr{
				pos: position{line: 848, col: 4, offset: 17988},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 848, col: 4, offset: 17988},
						val:        "or",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 848, col: 10, offset: 17994},
						expr: &ruleRefExpr{
							pos:  position{line: 848, col: 11, offset: 17995},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 850, col: 1, offset: 18017},
			expr: &seqExpr{
				pos: position{line: 851, col: 4, offset: 18029},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 851, col: 4, offset: 18029},
						val:        "not",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 851, col: 11, offset: 18036},
						expr: &ruleRefExpr{
							pos:  position{line: 851, col: 12, offset: 18037},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 853, col: 1, offset: 18059},
			expr: &seqExpr{
				pos: position{line: 854, col: 4, offset: 18070},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 854, col: 4, offset: 18070},
						val:        "in",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 854, col: 10, offset: 18076},
						expr: &ruleRefExpr{
							pos:  position{line: 854, col: 11, offset: 18077},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "LikeToken",
			pos:  position{line: 856, col: 1, offset: 18099},
			expr: &seqExpr{
				pos: position{line: 857, col: 4, offset: 18112},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 857, col: 4, offset: 18112},
						val:        "like",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 857, col: 12, offset: 18120},
						expr: &ruleRefExpr{
							pos:  position{line: 857, col: 13, offset: 18121},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "AscToken",
			pos:  position{line: 859, col: 1, offset: 18143},
			expr: &actionExpr{
				pos: position{line: 860, col: 4, offset: 18155},
				run: (*parser).callonAscToken1,
				expr: &seqExpr{
					pos: position{line: 860, col: 4, offset: 18155},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 860, col: 4, offset: 18155},
							val:        "asc",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 860, col: 11, offset: 18162},
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 12, offset: 18163},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "DescToken",
			pos:  position{line: 863, col: 1, offset: 18217},
			expr: &actionExpr{
				pos: position{line: 864, col: 4, offset: 18230},
				run: (*parser).callonDescToken1,
				expr: &seqExpr{
					pos: position{line: 864, col: 4, offset: 18230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 864, col: 4, offset: 18230},
							val:        "desc",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 864, col: 12, offset: 18238},
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 13, offset: 18239},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "CastToken",
			pos:  position{line: 867, col: 1, offset: 18293},
			expr: &seqExpr{
				pos: position{line: 868, col: 4, offset: 18306},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 868, col: 4, offset: 18306},
						val:        "cast",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 868, col: 12, offset: 18314},
						expr: &ruleRefExpr{
							pos:  position{line: 868, col: 13, offset: 18315},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "AsToken",
			pos:  position{line: 870, col: 1, offset: 18337},
			expr: &seqExpr{
				pos: position{line: 871, col: 4, offset: 18348},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 871, col: 4, offset: 18348},
						val:        "as",
						ignoreCase: true,
					},
					&notExpr{
						pos: position{line: 871, col: 10, offset: 18354},
						expr: &ruleRefExpr{
							pos:  position{line: 871, col: 11, offset: 18355},
							name: "NormalIdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "SeparatorToken",
			pos:  position{line: 873, col: 1, offset: 18377},
			expr: &litMatcher{
				pos:        position{line: 874, col: 4, offset: 18395},
				val:        ",",
				ignoreCase: false,
			},
		},
		{
			name: "AnyToken",
			pos:  position{line: 876, col: 1, offset: 18400},
			expr: &litMatcher{
				pos:        position{line: 877, col: 4, offset: 18412},
				val:        "*",
				ignoreCase: false,
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 880, col: 1, offset: 18435},
			expr: &choiceExpr{
				pos: position{line: 881, col: 4, offset: 18449},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 881, col: 4, offset: 18449},
						name: "NormalIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 882, col: 4, offset: 18469},
						name: "StringIdentifier",
					},
				},
			},
		},
		{
			name: "NormalIdentifier",
			pos:  position{line: 884, col: 1, offset: 18487},
			expr: &actionExpr{
				pos: position{line: 885, col: 4, offset: 18507},
				run: (*parser).callonNormalIdentifier1,
				expr: &seqExpr{
					pos: position{line: 885, col: 4, offset: 18507},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 885, col: 4, offset: 18507},
							name: "NormalIdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 885, col: 26, offset: 18529},
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 26, offset: 18529},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NormalIdentifierStart",
			pos:  position{line: 890, col: 1, offset: 18616},
			expr: &charClassMatcher{
				pos:        position{line: 891, col: 4, offset: 18641},
				val:        "[a-zA-Z@#_\\x80-\\xff]",
				chars:      []rune{'@', '#', '_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '\u0080', 'ÿ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NormalIdentifierRest",
			pos:  position{line: 893, col: 1, offset: 18663},
			expr: &charClassMatcher{
				pos:        position{line: 894, col: 4, offset: 18687},
				val:        "[a-zA-Z0-9@#$_\\x80-\\xff]",
				chars:      []rune{'@', '#', '$', '_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '\u0080', 'ÿ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "StringIdentifier",
			pos:  position{line: 896, col: 1, offset: 18713},
			expr: &actionExpr{
				pos: position{line: 897, col: 4, offset: 18733},
				run: (*parser).callonStringIdentifier1,
				expr: &seqExpr{
					pos: position{line: 897, col: 4, offset: 18733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 897, col: 4, offset: 18733},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 897, col: 9, offset: 18738},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 897, col: 11, offset: 18740},
								expr: &actionExpr{
									pos: position{line: 897, col: 13, offset: 18742},
									run: (*parser).callonStringIdentifier6,
									expr: &choiceExpr{
										pos: position{line: 897, col: 15, offset: 18744},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 897, col: 15, offset: 18744},
												val:        "[^\"\\r\\n\\\\]",
												chars:      []rune{'"', '\r', '\n', '\\'},
												ignoreCase: false,
												inverted:   true,
											},
											&seqExpr{
												pos: position{line: 897, col: 28, offset: 18757},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 897, col: 28, offset: 18757},
														val:        "\\",
														ignoreCase: false,
													},
													&anyMatcher{
														line: 897, col: 33, offset: 18762,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 897, col: 63, offset: 18792},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 920, col: 1, offset: 19293},
			expr: &zeroOrMoreExpr{
				pos: position{line: 921, col: 4, offset: 19298},
				expr: &ruleRefExpr{
					pos:  position{line: 921, col: 4, offset: 19298},
					name: "Whitespace",
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 923, col: 1, offset: 19311},
			expr: &choiceExpr{
				pos: position{line: 924, col: 4, offset: 19325},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 924, col: 4, offset: 19325},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 925, col: 4, offset: 19346},
						val:        "\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 926, col: 4, offset: 19367},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 927, col: 4, offset: 19388},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 928, col: 4, offset: 19409},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 929, col: 4, offset: 19430},
						val:        " ",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 931, col: 1, offset: 19452},
			expr: &notExpr{
				pos: position{line: 932, col: 4, offset: 19459},
				expr: &anyMatcher{
					line: 932, col: 5, offset: 19460,
				},
			},
		},
	},
}

func (c *current) onS10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonS10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS10(stack["s"])
}

func (c *current) onS1(x, xs interface{}) (interface{}, error) {
	return prepend(x, xs), nil
}

func (p *parser) callonS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS1(stack["x"], stack["xs"])
}

func (c *current) onSelectStmt9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSelectStmt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt9(stack["s"])
}

func (c *current) onSelectStmt18(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonSelectStmt18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt18(stack["i"])
}

func (c *current) onSelectStmt27(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonSelectStmt27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt27(stack["w"])
}

func (c *current) onSelectStmt34(g interface{}) (interface{}, error) {
	return g, nil
}

func (p *parser) callonSelectStmt34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt34(stack["g"])
}

func (c *current) onSelectStmt41(or interface{}) (interface{}, error) {
	return or, nil
}

func (p *parser) callonSelectStmt41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt41(stack["or"])
}

func (c *current) onSelectStmt48(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSelectStmt48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt48(stack["l"])
}

func (c *current) onSelectStmt55(of interface{}) (interface{}, error) {
	return of, nil
}

func (p *parser) callonSelectStmt55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt55(stack["of"])
}

func (c *current) onSelectStmt1(f, fs, table, where, group, order, limit, offset interface{}) (interface{}, error) {
	var (
		tableNode  *ast.IdentifierNode
		whereNode  *ast.WhereOptionNode
		limitNode  *ast.LimitOptionNode
		offsetNode *ast.OffsetOptionNode
	)
	if table != nil {
		t := table.(ast.IdentifierNode)
		tableNode = &t
	}
	if where != nil {
		w := where.(ast.WhereOptionNode)
		whereNode = &w
	}
	if limit != nil {
		l := limit.(ast.LimitOptionNode)
		limitNode = &l
	}
	if offset != nil {
		o := offset.(ast.OffsetOptionNode)
		offsetNode = &o
	}
	return ast.SelectStmtNode{
		Column: prepend(f, fs),
		Table:  tableNode,
		Where:  whereNode,
		Group:  toSlice(group),
		Order:  toSlice(order),
		Limit:  limitNode,
		Offset: offsetNode,
	}, nil
}

func (p *parser) callonSelectStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt1(stack["f"], stack["fs"], stack["table"], stack["where"], stack["group"], stack["order"], stack["limit"], stack["offset"])
}

func (c *current) onUpdateStmt14(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonUpdateStmt14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt14(stack["s"])
}

func (c *current) onUpdateStmt23(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonUpdateStmt23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt23(stack["w"])
}

func (c *current) onUpdateStmt1(table, a, as, where interface{}) (interface{}, error) {
	var (
		whereNode *ast.WhereOptionNode
	)
	if where != nil {
		w := where.(ast.WhereOptionNode)
		whereNode = &w
	}
	return ast.UpdateStmtNode{
		Table:      table.(ast.IdentifierNode),
		Assignment: prepend(a, as),
		Where:      whereNode,
	}, nil
}

func (p *parser) callonUpdateStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt1(stack["table"], stack["a"], stack["as"], stack["where"])
}

func (c *current) onDeleteStmt11(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDeleteStmt11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteStmt11(stack["w"])
}

func (c *current) onDeleteStmt1(table, where interface{}) (interface{}, error) {
	var (
		whereNode *ast.WhereOptionNode
	)
	if where != nil {
		w := where.(ast.WhereOptionNode)
		whereNode = &w
	}
	return ast.DeleteStmtNode{
		Table: table.(ast.IdentifierNode),
		Where: whereNode,
	}, nil
}

func (p *parser) callonDeleteStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteStmt1(stack["table"], stack["where"])
}

func (c *current) onInsertStmt1(table, insert interface{}) (interface{}, error) {
	return ast.InsertStmtNode{
		Table:  table.(ast.IdentifierNode),
		Insert: insert,
	}, nil
}

func (p *parser) callonInsertStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertStmt1(stack["table"], stack["insert"])
}

func (c *current) onInsertValue1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonInsertValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertValue1(stack["e"])
}

func (c *current) onCreateTableStmt20(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonCreateTableStmt20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt20(stack["t"])
}

func (c *current) onCreateTableStmt14(s, ss interface{}) (interface{}, error) {
	return prepend(s, ss), nil
}

func (p *parser) callonCreateTableStmt14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt14(stack["s"], stack["ss"])
}

func (c *current) onCreateTableStmt1(table, column interface{}) (interface{}, error) {
	return ast.CreateTableStmtNode{
		Table:  table.(ast.IdentifierNode),
		Column: toSlice(column),
	}, nil
}

func (p *parser) callonCreateTableStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt1(stack["table"], stack["column"])
}

func (c *current) onColumnSchema10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonColumnSchema10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnSchema10(stack["s"])
}

func (c *current) onColumnSchema1(i, t, cs interface{}) (interface{}, error) {
	return ast.ColumnSchemaNode{
		Column:     i.(ast.IdentifierNode),
		DataType:   t,
		Constraint: toSlice(cs),
	}, nil
}

func (p *parser) callonColumnSchema1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnSchema1(stack["i"], stack["t"], stack["cs"])
}

func (c *current) onCreateIndexStmt6(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonCreateIndexStmt6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt6(stack["u"])
}

func (c *current) onCreateIndexStmt28(x interface{}) (interface{}, error) {
	return x, nil
}

func (p *parser) callonCreateIndexStmt28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt28(stack["x"])
}

func (c *current) onCreateIndexStmt1(unique, index, table, i, is interface{}) (interface{}, error) {
	var (
		uniqueNode *ast.UniqueOptionNode
	)
	if unique != nil {
		u := unique.(ast.UniqueOptionNode)
		uniqueNode = &u
	}
	return ast.CreateIndexStmtNode{
		Index:  index.(ast.IdentifierNode),
		Table:  table.(ast.IdentifierNode),
		Column: prepend(i, is),
		Unique: uniqueNode,
	}, nil
}

func (p *parser) callonCreateIndexStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt1(stack["unique"], stack["index"], stack["table"], stack["i"], stack["is"])
}

func (c *current) onWhereClause1(e interface{}) (interface{}, error) {
	return ast.WhereOptionNode{Condition: e}, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["e"])
}

func (c *current) onOrderByClause11(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonOrderByClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause11(stack["s"])
}

func (c *current) onOrderByClause1(f, fs interface{}) (interface{}, error) {
	return prepend(f, fs), nil
}

func (p *parser) callonOrderByClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause1(stack["f"], stack["fs"])
}

func (c *current) onOrderColumn7(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOrderColumn7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn7(stack["t"])
}

func (c *current) onOrderColumn16(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonOrderColumn16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn16(stack["l"])
}

func (c *current) onOrderColumn1(i, s, n interface{}) (interface{}, error) {
	return ast.OrderOptionNode{
		Expr:       i,
		Desc:       s != nil && string(s.([]byte)) == "desc",
		NullsFirst: n != nil && string(n.([]byte)) == "first",
	}, nil
}

func (p *parser) callonOrderColumn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn1(stack["i"], stack["s"], stack["n"])
}

func (c *current) onGroupByClause11(s interface{}) (interface{}, error) {
	return ast.GroupOptionNode{Expr: s}, nil
}

func (p *parser) callonGroupByClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByClause11(stack["s"])
}

func (c *current) onGroupByClause1(i, is interface{}) (interface{}, error) {
	return prepend(ast.GroupOptionNode{Expr: i}, is), nil
}

func (p *parser) callonGroupByClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByClause1(stack["i"], stack["is"])
}

func (c *current) onOffsetClause1(i interface{}) (interface{}, error) {
	return ast.OffsetOptionNode{Value: i.(ast.IntegerValueNode)}, nil
}

func (p *parser) callonOffsetClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetClause1(stack["i"])
}

func (c *current) onLimitClause1(i interface{}) (interface{}, error) {
	return ast.LimitOptionNode{Value: i.(ast.IntegerValueNode)}, nil
}

func (p *parser) callonLimitClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitClause1(stack["i"])
}

func (c *current) onInsertWithColumnClause13(x interface{}) (interface{}, error) {
	return x, nil
}

func (p *parser) callonInsertWithColumnClause13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause13(stack["x"])
}

func (c *current) onInsertWithColumnClause5(f, fs interface{}) (interface{}, error) {
	return prepend(f, fs), nil
}

func (p *parser) callonInsertWithColumnClause5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause5(stack["f"], stack["fs"])
}

func (c *current) onInsertWithColumnClause29(y interface{}) (interface{}, error) {
	return y, nil
}

func (p *parser) callonInsertWithColumnClause29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause29(stack["y"])
}

func (c *current) onInsertWithColumnClause1(cs, v, vs interface{}) (interface{}, error) {
	return ast.InsertWithColumnOptionNode{
		Column: toSlice(cs),
		Value:  prepend(v, vs),
	}, nil
}

func (p *parser) callonInsertWithColumnClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause1(stack["cs"], stack["v"], stack["vs"])
}

func (c *current) onInsertWithDefaultClause1() (interface{}, error) {
	return ast.InsertWithDefaultOptionNode{}, nil
}

func (p *parser) callonInsertWithDefaultClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithDefaultClause1()
}

func (c *current) onPrimaryKeyClause1() (interface{}, error) {
	return ast.PrimaryOptionNode{}, nil
}

func (p *parser) callonPrimaryKeyClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryKeyClause1()
}

func (c *current) onNotNullClause1() (interface{}, error) {
	return ast.NotNullOptionNode{}, nil
}

func (p *parser) callonNotNullClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotNullClause1()
}

func (c *current) onUniqueClause1() (interface{}, error) {
	return ast.UniqueOptionNode{}, nil
}

func (p *parser) callonUniqueClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqueClause1()
}

func (c *current) onDefaultClause1(e interface{}) (interface{}, error) {
	return ast.DefaultOptionNode{Value: e}, nil
}

func (p *parser) callonDefaultClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultClause1(stack["e"])
}

func (c *current) onForeignClause1(t, f interface{}) (interface{}, error) {
	return ast.ForeignOptionNode{
		Table:  t.(ast.IdentifierNode),
		Column: f.(ast.IdentifierNode),
	}, nil
}

func (p *parser) callonForeignClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForeignClause1(stack["t"], stack["f"])
}

func (c *current) onAutoincrementClause1() (interface{}, error) {
	return ast.AutoIncrementOptionNode{}, nil
}

func (p *parser) callonAutoincrementClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAutoincrementClause1()
}

func (c *current) onExprWithDefault2(d interface{}) (interface{}, error) {
	return d, nil
}

func (p *parser) callonExprWithDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprWithDefault2(stack["d"])
}

func (c *current) onLogicExpr47(op, s interface{}) (interface{}, error) {
	return opSetSubject(op, s), nil
}

func (p *parser) callonLogicExpr47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr47(stack["op"], stack["s"])
}

func (c *current) onLogicExpr41(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o, os), nil
}

func (p *parser) callonLogicExpr41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr41(stack["o"], stack["os"])
}

func (c *current) onLogicExpr37(op, s interface{}) (interface{}, error) {
	return opSetSubject(op, s), nil
}

func (p *parser) callonLogicExpr37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr37(stack["op"], stack["s"])
}

func (c *current) onLogicExpr31(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o, os), nil
}

func (p *parser) callonLogicExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr31(stack["o"], stack["os"])
}

func (c *current) onLogicExpr22(op, s interface{}) (interface{}, error) {
	return opSetTarget(op, s), nil
}

func (p *parser) callonLogicExpr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr22(stack["op"], stack["s"])
}

func (c *current) onLogicExpr17(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonLogicExpr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr17(stack["l"])
}

func (c *current) onLogicExpr11(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o, os), nil
}

func (p *parser) callonLogicExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr11(stack["o"], stack["os"])
}

func (c *current) onLogicExpr1In5(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1In5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1In5(stack["t"])
}

func (c *current) onLogicExpr1In1(n, s interface{}) (interface{}, error) {
	op := opSetSubject(&ast.InOperatorNode{}, s)
	if n != nil {
		return opSetTarget(n, op), nil
	}
	return op, nil
}

func (p *parser) callonLogicExpr1In1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1In1(stack["n"], stack["s"])
}

func (c *current) onLogicExpr1Null6(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1Null6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Null6(stack["t"])
}

func (c *current) onLogicExpr1Null1(n interface{}) (interface{}, error) {
	op := opSetSubject(&ast.IsOperatorNode{}, ast.NullValueNode{})
	if n != nil {
		return opSetTarget(n, op), nil
	}
	return op, nil
}

func (p *parser) callonLogicExpr1Null1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Null1(stack["n"])
}

func (c *current) onLogicExpr1Like5(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1Like5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like5(stack["t"])
}

func (c *current) onLogicExpr1Like1(n, s interface{}) (interface{}, error) {
	op := opSetSubject(&ast.LikeOperatorNode{}, s)
	if n != nil {
		return opSetTarget(n, op), nil
	}
	return op, nil
}

func (p *parser) callonLogicExpr1Like1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like1(stack["n"], stack["s"])
}

func (c *current) onLogicExpr1Cmp1(op, s interface{}) (interface{}, error) {
	return opSetSubject(op, s), nil
}

func (p *parser) callonLogicExpr1Cmp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Cmp1(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr37(op, s interface{}) (interface{}, error) {
	return opSetSubject(op, s), nil
}

func (p *parser) callonArithmeticExpr37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr37(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr31(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o, os), nil
}

func (p *parser) callonArithmeticExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr31(stack["o"], stack["os"])
}

func (c *current) onArithmeticExpr27(op, s interface{}) (interface{}, error) {
	return opSetSubject(op, s), nil
}

func (p *parser) callonArithmeticExpr27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr27(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr21(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o, os), nil
}

func (p *parser) callonArithmeticExpr21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr21(stack["o"], stack["os"])
}

func (c *current) onArithmeticExpr17(op, s interface{}) (interface{}, error) {
	return opSetSubject(op, s), nil
}

func (p *parser) callonArithmeticExpr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr17(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr11(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o, os), nil
}

func (p *parser) callonArithmeticExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr11(stack["o"], stack["os"])
}

func (c *current) onMultiExpr7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMultiExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExpr7(stack["e"])
}

func (c *current) onMultiExpr1(x, xs interface{}) (interface{}, error) {
	return prepend(x, xs), nil
}

func (p *parser) callonMultiExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExpr1(stack["x"], stack["xs"])
}

func (c *current) onMultiExprWithDefault7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMultiExprWithDefault7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExprWithDefault7(stack["e"])
}

func (c *current) onMultiExprWithDefault1(x, xs interface{}) (interface{}, error) {
	return prepend(x, xs), nil
}

func (p *parser) callonMultiExprWithDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExprWithDefault1(stack["x"], stack["xs"])
}

func (c *current) onOperand2(op, s interface{}) (interface{}, error) {
	return opSetTarget(op, s), nil
}

func (p *parser) callonOperand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand2(stack["op"], stack["s"])
}

func (c *current) onOperand9(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonOperand9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand9(stack["e"])
}

func (c *current) onOperand17(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOperand17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand17(stack["t"])
}

func (c *current) onTypeCast1(o, s interface{}) (interface{}, error) {
	return opSetSubject(opSetObject(&ast.CastOperatorNode{}, o), s), nil
}

func (p *parser) callonTypeCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeCast1(stack["o"], stack["s"])
}

func (c *current) onFunctionCall1(i, r interface{}) (interface{}, error) {
	return opSetSubject(opSetObject(&ast.FunctionOperatorNode{}, i), r), nil
}

func (p *parser) callonFunctionCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionCall1(stack["i"], stack["r"])
}

func (c *current) onFunctionArgs2(a interface{}) (interface{}, error) {
	return []interface{}{a}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["a"])
}

func (c *current) onAssignment1(i, e interface{}) (interface{}, error) {
	return opSetSubject(opSetObject(&ast.AssignOperatorNode{}, i), e), nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["i"], stack["e"])
}

func (c *current) onSignOperator1() (interface{}, error) {
	switch string(c.text) {
	case "+":
		return &ast.PosOperatorNode{}, nil
	case "-":
		return &ast.NegOperatorNode{}, nil
	}
	panic(fmt.Sprintf("unknown sign %s", c.text))
}

func (p *parser) callonSignOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSignOperator1()
}

func (c *current) onNotOperator1() (interface{}, error) {
	return &ast.NotOperatorNode{}, nil
}

func (p *parser) callonNotOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotOperator1()
}

func (c *current) onAndOperator1() (interface{}, error) {
	return &ast.AndOperatorNode{}, nil
}

func (p *parser) callonAndOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndOperator1()
}

func (c *current) onOrOperator1() (interface{}, error) {
	return &ast.OrOperatorNode{}, nil
}

func (p *parser) callonOrOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrOperator1()
}

func (c *current) onCmpOperator1() (interface{}, error) {
	switch string(c.text) {
	case "<=":
		return &ast.LessOrEqualOperatorNode{}, nil
	case ">=":
		return &ast.GreaterOrEqualOperatorNode{}, nil
	case "<>":
		return &ast.NotEqualOperatorNode{}, nil
	case "!=":
		return &ast.NotEqualOperatorNode{}, nil
	case "<":
		return &ast.LessOperatorNode{}, nil
	case ">":
		return &ast.GreaterOperatorNode{}, nil
	case "=":
		return &ast.EqualOperatorNode{}, nil
	}
	panic(fmt.Sprintf("unknown comparison operator %s", c.text))
}

func (p *parser) callonCmpOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCmpOperator1()
}

func (c *current) onConcatOperator1() (interface{}, error) {
	return &ast.ConcatOperatorNode{}, nil
}

func (p *parser) callonConcatOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatOperator1()
}

func (c *current) onAddSubOperator1() (interface{}, error) {
	switch string(c.text) {
	case "+":
		return &ast.AddOperatorNode{}, nil
	case "-":
		return &ast.SubOperatorNode{}, nil
	}
	panic(fmt.Sprintf("unknown addition or subtraction operator %s", c.text))
}

func (p *parser) callonAddSubOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddSubOperator1()
}

func (c *current) onMulDivModOperator1() (interface{}, error) {
	switch string(c.text) {
	case "*":
		return &ast.MulOperatorNode{}, nil
	case "/":
		return &ast.DivOperatorNode{}, nil
	case "%":
		return &ast.ModOperatorNode{}, nil
	}
	panic(fmt.Sprintf("unknown multiplication, division, modulo operator: %s", c.text))
}

func (p *parser) callonMulDivModOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMulDivModOperator1()
}

func (c *current) onUIntType1(s interface{}) (interface{}, error) {
	node := ast.IntTypeNode{Unsigned: true}
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "UIntType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonUIntType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntType1(stack["s"])
}

func (c *current) onIntType1(s interface{}) (interface{}, error) {
	node := ast.IntTypeNode{Unsigned: false}
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "IntType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonIntType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntType1(stack["s"])
}

func (c *current) onUFixedType1(s, t interface{}) (interface{}, error) {
	node := ast.FixedTypeNode{Unsigned: true}
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "UFixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	fractionalDigits, code := toUint(t.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "UFixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", t, code),
		}
		return node, err
	}
	node.Size = size
	node.FractionalDigits = fractionalDigits
	return node, nil
}

func (p *parser) callonUFixedType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUFixedType1(stack["s"], stack["t"])
}

func (c *current) onFixedType1(s, t interface{}) (interface{}, error) {
	node := ast.FixedTypeNode{Unsigned: false}
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "FixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	fractionalDigits, code := toUint(t.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "FixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", t, code),
		}
		return node, err
	}
	node.Size = size
	node.FractionalDigits = fractionalDigits
	return node, nil
}

func (p *parser) callonFixedType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedType1(stack["s"], stack["t"])
}

func (c *current) onFixedBytesType2(s interface{}) (interface{}, error) {
	node := ast.FixedBytesTypeNode{}
	size, code := toUint(s.([]byte))
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "FixedBytesType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonFixedBytesType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedBytesType2(stack["s"])
}

func (c *current) onFixedBytesType9() (interface{}, error) {
	return ast.FixedBytesTypeNode{Size: 1}, nil
}

func (p *parser) callonFixedBytesType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedBytesType9()
}

func (c *current) onDynamicBytesType1() (interface{}, error) {
	return ast.DynamicBytesTypeNode{}, nil
}

func (p *parser) callonDynamicBytesType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDynamicBytesType1()
}

func (c *current) onAddressType1() (interface{}, error) {
	return ast.AddressTypeNode{}, nil
}

func (p *parser) callonAddressType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressType1()
}

func (c *current) onBoolType1() (interface{}, error) {
	return ast.BoolTypeNode{}, nil
}

func (p *parser) callonBoolType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolType1()
}

func (c *current) onAnyLiteral1() (interface{}, error) {
	return ast.AnyValueNode{}, nil
}

func (p *parser) callonAnyLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyLiteral1()
}

func (c *current) onDefaultLiteral1() (interface{}, error) {
	return ast.DefaultValueNode{}, nil
}

func (p *parser) callonDefaultLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultLiteral1()
}

func (c *current) onBoolLiteral1(b interface{}) (interface{}, error) {
	return ast.BoolValueNode{V: string(b.([]byte)) == "true"}, nil
}

func (p *parser) callonBoolLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolLiteral1(stack["b"])
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return ast.NullValueNode{}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onNumberLiteral2(h interface{}) (interface{}, error) {
	return h, nil
}

func (p *parser) callonNumberLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral2(stack["h"])
}

func (c *current) onInteger1() (interface{}, error) {
	node := ast.IntegerValueNode{IsAddress: false, V: decimal.Zero}
	v, code := toDecimal(c.text)
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "Integer",
			Message:  fmt.Sprintf("cannot parse %s as decimal: %v", c.text, code),
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onNonZeroLeadingInteger1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNonZeroLeadingInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonZeroLeadingInteger1()
}

func (c *current) onDecimal1() (interface{}, error) {
	node := ast.DecimalValueNode{V: decimal.Zero}
	v, code := toDecimal(c.text)
	if code != errors.ErrorCodeNil {
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "Decimal",
			Message:  fmt.Sprintf("cannot parse %s as decimal: %v", c.text, code),
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonDecimal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimal1()
}

func (c *current) onHex1(s interface{}) (interface{}, error) {
	return hexToInteger(joinBytes(s)), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1(stack["s"])
}

func (c *current) onHexString9() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonHexString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexString9()
}

func (c *current) onHexString1(s interface{}) (interface{}, error) {
	return ast.BytesValueNode{V: hexToBytes(joinBytes(s))}, nil
}

func (p *parser) callonHexString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexString1(stack["s"])
}

func (c *current) onNormalString6() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNormalString6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalString6()
}

func (c *current) onNormalString1(s interface{}) (interface{}, error) {
	node := ast.BytesValueNode{}
	bs := joinBytes(s)
	v, bad, code := resolveString(bs)
	if code != errors.ErrorCodeNil {
		msg := fmt.Sprintf("cannot resolve escape sequence '%s': %v",
			sanitizeBadEscape(bad), code)
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "NormalString",
			Message:  msg,
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonNormalString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalString1(stack["s"])
}

func (c *current) onTrueToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonTrueToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrueToken1()
}

func (c *current) onFalseToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonFalseToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFalseToken1()
}

func (c *current) onLastToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonLastToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLastToken1()
}

func (c *current) onFirstToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonFirstToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstToken1()
}

func (c *current) onAscToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonAscToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAscToken1()
}

func (c *current) onDescToken1() (interface{}, error) {
	return toLower(c.text), nil
}

func (p *parser) callonDescToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescToken1()
}

func (c *current) onNormalIdentifier1() (interface{}, error) {
	return ast.IdentifierNode{Name: decodeString(c.text)}, nil
}

func (p *parser) callonNormalIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalIdentifier1()
}

func (c *current) onStringIdentifier6() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonStringIdentifier6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringIdentifier6()
}

func (c *current) onStringIdentifier1(s interface{}) (interface{}, error) {
	node := ast.IdentifierNode{}
	bs := joinBytes(s)
	name, bad, code := resolveString(bs)
	if code != errors.ErrorCodeNil {
		msg := fmt.Sprintf("cannot resolve escape sequence '%s': %v",
			sanitizeBadEscape(bad), code)
		err := errors.Error{
			Position: uint32(c.pos.offset),
			Category: errors.ErrorCategoryGrammar,
			Code:     code,
			Token:    string(c.text),
			Prefix:   "StringIdentifier",
			Message:  msg,
		}
		return node, err
	}
	node.Name = name
	return node, nil
}

func (p *parser) callonStringIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringIdentifier1(stack["s"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = goerrors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = goerrors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = goerrors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = goerrors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// parseFile parses the file identified by filename.
func parseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return parseReader(filename, f, opts...)
}

// parseReader parses the data from r using filename as information in the
// error messages.
func parseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return parse(filename, b, opts...)
}

// parse parses the data from b using filename as information in the
// error messages.
func parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(goerrors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
